{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"RDCP Protocol Specification","text":"<p>Version: v1.0 Status: Draft Purpose: Language-agnostic runtime debug control protocol</p>"},{"location":"#overview","title":"Overview","text":"<p>RDCP (Runtime Debug Control Protocol) is a standardized HTTP-based protocol for controlling debug logging in distributed applications at runtime. This specification is designed to be language and framework agnostic, enabling consistent debug control across heterogeneous systems.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Runtime Control: Enable/disable debug categories without restarts</li> <li>Multi-level Security: Basic, Standard, and Enterprise authentication modes  </li> <li>Multi-tenant Ready: Built-in tenant isolation support</li> <li>Performance Aware: Zero-overhead when debug categories are disabled</li> <li>Language Agnostic: HTTP/JSON protocol works with any technology stack</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#required-endpoints","title":"Required Endpoints","text":"<p>All RDCP-compliant implementations must expose these endpoints:</p> Endpoint Method Purpose <code>/.well-known/rdcp</code> GET Protocol discovery <code>/rdcp/v1/discovery</code> GET Debug system discovery <code>/rdcp/v1/control</code> POST Runtime control <code>/rdcp/v1/status</code> GET Current status <code>/rdcp/v1/health</code> GET System health"},{"location":"#example-discovery-response","title":"Example Discovery Response","text":"<pre><code>{\n  \"protocol\": \"rdcp/1.0\",\n  \"endpoints\": {\n    \"discovery\": \"/rdcp/v1/discovery\",\n    \"control\": \"/rdcp/v1/control\",\n    \"status\": \"/rdcp/v1/status\",\n    \"health\": \"/rdcp/v1/health\"\n  },\n  \"security\": {\n    \"level\": \"standard\",\n    \"methods\": [\"bearer\"],\n    \"required\": true\n  }\n}\n</code></pre>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"<ul> <li>API Reference - Interactive OpenAPI (v1) with try-it examples</li> <li>Protocol Specification - Complete technical specification</li> <li>Implementation Guide - Step-by-step implementation instructions</li> <li>Protocol Schemas - JSON schema definitions</li> <li>Error Codes - Standard error codes and handling</li> <li>Compliance Report - Compliance levels and requirements</li> </ul>"},{"location":"#security-levels","title":"Security Levels","text":"Level Use Case Authentication Features Basic Development/Internal API Key Simple shared secrets Standard Production SaaS Bearer Token (JWT) User identity, scopes Enterprise Regulated Industries mTLS + Token Full audit trail, compliance"},{"location":"#getting-started","title":"Getting Started","text":"<ol> <li>Read the Protocol Specification for complete technical details</li> <li>Follow the Implementation Guide for step-by-step instructions  </li> <li>Review Error Codes for proper error handling</li> <li>Check Compliance Requirements for your target security level</li> </ol>"},{"location":"#community","title":"Community","text":"<ul> <li>Repository: github.com/mojoatomic/rdcp-protocol</li> <li>Issues: Report bugs or request features</li> <li>SDK Implementation: RDCP JavaScript/TypeScript SDK</li> </ul> <p>RDCP is designed for production use in enterprise and government environments, with a focus on security, performance, and protocol compliance.</p>"},{"location":"PROTOCOL-COMPLIANCE-REPORT/","title":"RDCP Protocol Compliance Analysis Report","text":"<p>Project: RDCP SDK Protocol Version: RDCP v1.0 Assessment Date: 2025-09-22 Documentation Sources: <code>/docs/rdcp-protocol-specification.md</code>, <code>/docs/rdcp-implementation-guide.md</code></p>"},{"location":"PROTOCOL-COMPLIANCE-REPORT/#executive-summary","title":"Executive Summary","text":"<p>The RDCP SDK demonstrates Level 2 (Standard) compliance with RDCP v1.0 Protocol Specification. This report documents implementation coverage across required endpoints, authentication levels, multi-tenancy support, and identifies areas requiring enhancement for Level 3 (Enterprise) compliance.</p>"},{"location":"PROTOCOL-COMPLIANCE-REPORT/#compliance-status-protocol-compliant","title":"Compliance Status: Protocol Compliant","text":"<ul> <li>All Required Endpoints: Implemented</li> <li>Authentication Security Levels: 3 of 3 supported</li> <li>Multi-Tenancy: Standards compliant</li> <li>Error Handling: Protocol-standard format</li> <li>Client &amp; Server SDKs: Complete</li> <li>Temporary Controls (TTL): Core support with validation</li> </ul>"},{"location":"PROTOCOL-COMPLIANCE-REPORT/#detailed-implementation-analysis","title":"Detailed Implementation Analysis","text":""},{"location":"PROTOCOL-COMPLIANCE-REPORT/#1-required-endpoints","title":"1. Required Endpoints","text":"<p>Per Section 5 of the RDCP Protocol Specification, all required endpoints are implemented:</p> Endpoint Status Implementation Response Format <code>/.well-known/rdcp</code> Implemented Core RDCPServer + framework adapters Specification-compliant <code>/rdcp/v1/discovery</code> Implemented Core RDCPServer + framework adapters Specification-compliant <code>/rdcp/v1/control</code> Implemented Core RDCPServer + framework adapters Specification-compliant <code>/rdcp/v1/status</code> Implemented Core RDCPServer + framework adapters Specification-compliant <code>/rdcp/v1/health</code> Implemented Core RDCPServer + framework adapters Specification-compliant <p>All endpoints return JSON schemas conforming to Protocol Specification Section 5.</p>"},{"location":"PROTOCOL-COMPLIANCE-REPORT/#2-authentication-implementation","title":"2. Authentication Implementation","text":"<p>Per Section 3 of the RDCP Protocol Specification, all security levels are supported:</p>"},{"location":"PROTOCOL-COMPLIANCE-REPORT/#level-1-basic-api-key","title":"Level 1: Basic (API Key)","text":"<ul> <li>Implementation: <code>src/auth/basic.ts</code></li> <li>API Key Length: Enforces 32+ character minimum per specification</li> <li>Constant-Time Comparison: Uses <code>crypto.timingSafeEqual()</code></li> <li>Headers Support: Accepts <code>X-API-Key</code> and <code>Authorization: Bearer</code></li> <li>Framework Compatibility: Express, Fastify, Koa, Next.js</li> </ul>"},{"location":"PROTOCOL-COMPLIANCE-REPORT/#level-2-standard-jwt-bearer-token","title":"Level 2: Standard (JWT Bearer Token)","text":"<ul> <li>Implementation: <code>src/auth/standard.ts</code></li> <li>JWT Validation: Signature verification and expiration checking</li> <li>Scopes Support: Validates RDCP scopes (<code>discovery</code>, <code>status</code>, <code>control</code>, <code>admin</code>)</li> <li>User Context: Extracts user identity and tenant information</li> <li>Error Handling: Returns auth context and failure reasons</li> </ul>"},{"location":"PROTOCOL-COMPLIANCE-REPORT/#level-3-enterprise-mtls-jwt-hybrid","title":"Level 3: Enterprise (mTLS + JWT Hybrid)","text":"<ul> <li>Implementation: <code>src/auth/enterprise.ts</code></li> <li>Certificate Validation: X.509 certificate parsing and validation</li> <li>Certificate Expiry: Validates validity periods</li> <li>Hybrid Mode: Supports mTLS-only and mTLS+JWT</li> <li>Tenant Extraction: Extracts context from certificate CN field</li> <li>Audit Metadata: Provides certificate details for logging</li> </ul>"},{"location":"PROTOCOL-COMPLIANCE-REPORT/#unified-auth-adapter","title":"Unified Auth Adapter","text":"<ul> <li>Implementation: <code>src/auth/index.ts</code></li> <li>Environment-Based Selection: Configurable via <code>RDCP_AUTH_LEVEL</code></li> <li>Header Validation: Validates required RDCP headers per Section 3.2</li> <li>Consistent Interface: Normalizes authentication methods</li> </ul>"},{"location":"PROTOCOL-COMPLIANCE-REPORT/#3-multi-tenancy-support","title":"3. Multi-Tenancy Support","text":"<p>Per Section 4 of the RDCP Protocol Specification:</p>"},{"location":"PROTOCOL-COMPLIANCE-REPORT/#standard-headers","title":"Standard Headers","text":"<ul> <li>X-RDCP-Tenant-ID: Tenant identifier extraction</li> <li>X-RDCP-Isolation-Level: Supports 4 levels (<code>global</code>, <code>process</code>, <code>namespace</code>, <code>organization</code>)</li> <li>X-RDCP-Tenant-Name: Optional tenant name</li> </ul>"},{"location":"PROTOCOL-COMPLIANCE-REPORT/#isolation-levels","title":"Isolation Levels","text":"<ul> <li>Implementation: <code>src/utils/tenant.js</code></li> <li>Global Isolation: Single configuration</li> <li>Process Isolation: Per-process instance configuration</li> <li>Namespace Isolation: Per-namespace/environment</li> <li>Organization Isolation: Complete tenant separation</li> </ul>"},{"location":"PROTOCOL-COMPLIANCE-REPORT/#tenant-context-in-responses","title":"Tenant Context in Responses","text":"<p>Endpoints include tenant context when multi-tenancy is enabled:</p> <pre><code>{\n  \"protocol\": \"rdcp/1.0\",\n  \"tenant\": {\n    \"id\": \"&lt;tenant-id&gt;\",\n    \"isolationLevel\": \"&lt;level&gt;\",\n    \"scope\": \"global|tenant-isolated\"\n  }\n}\n</code></pre>"},{"location":"PROTOCOL-COMPLIANCE-REPORT/#4-error-handling","title":"4. Error Handling","text":"<p>Per Section 6 of the RDCP Protocol Specification:</p>"},{"location":"PROTOCOL-COMPLIANCE-REPORT/#standard-error-format","title":"Standard Error Format","text":"<pre><code>{\n  \"error\": {\n    \"code\": \"RDCP_ERROR_CODE\",\n    \"message\": \"Human-readable message\",\n    \"protocol\": \"rdcp/1.0\"\n  }\n}\n</code></pre>"},{"location":"PROTOCOL-COMPLIANCE-REPORT/#standard-error-codes","title":"Standard Error Codes","text":"<ul> <li>Implementation: <code>src/utils/types.ts</code>, <code>src/validation/errors.js</code></li> <li>RDCP_AUTH_REQUIRED: 401 authentication required</li> <li>RDCP_FORBIDDEN: 403 insufficient permissions</li> <li>RDCP_NOT_FOUND: 404 resource not found</li> <li>RDCP_VALIDATION_ERROR: 400 request validation failed</li> <li>RDCP_CATEGORY_NOT_FOUND: 400 invalid category</li> <li>RDCP_RATE_LIMITED: 429 rate limit exceeded</li> <li>RDCP_INTERNAL_ERROR: 500 internal server error</li> </ul>"},{"location":"PROTOCOL-COMPLIANCE-REPORT/#5-performance-metrics","title":"5. Performance Metrics","text":"<p>Per Section 7 of the RDCP Protocol Specification:</p>"},{"location":"PROTOCOL-COMPLIANCE-REPORT/#metric-representation","title":"Metric Representation","text":"<pre><code>{\n  \"value\": 0,\n  \"unit\": \"&lt;unit&gt;\",\n  \"measured\": true,\n  \"timestamp\": \"2025-09-17T10:30:00Z\"\n}\n</code></pre> <p>Current Implementation: Uses placeholder values with <code>measured: false</code> flag indicating estimated rather than real-time measurements.</p>"},{"location":"PROTOCOL-COMPLIANCE-REPORT/#6-client-sdk-implementation","title":"6. Client SDK Implementation","text":"<ul> <li>Implementation: <code>src/client/index.ts</code></li> <li>Endpoint Coverage: All 5 required RDCP endpoints</li> <li>Authentication: All 3 security levels</li> <li>Multi-Tenancy: Tenant context header management</li> <li>Caching: Discovery response caching with TTL</li> <li>Error Handling: Protocol-compliant error processing</li> <li>TypeScript: Full type definitions</li> </ul>"},{"location":"PROTOCOL-COMPLIANCE-REPORT/#client-features","title":"Client Features","text":"<ul> <li>Connection Testing: Built-in validation</li> <li>Convenience Methods: <code>enable()</code>, <code>disable()</code>, <code>toggle()</code>, <code>reset()</code></li> <li>Category Management: Get available categories with descriptions</li> <li>Retry Logic: Configurable retry with timeout handling</li> </ul>"},{"location":"PROTOCOL-COMPLIANCE-REPORT/#7-framework-support","title":"7. Framework Support","text":""},{"location":"PROTOCOL-COMPLIANCE-REPORT/#supported-frameworks","title":"Supported Frameworks","text":"<ul> <li>Express.js: Middleware integration</li> <li>Fastify: Plugin and middleware patterns</li> <li>Koa: Middleware integration</li> <li>Next.js: App Router support</li> </ul>"},{"location":"PROTOCOL-COMPLIANCE-REPORT/#protocol-compliance-level","title":"Protocol Compliance Level","text":""},{"location":"PROTOCOL-COMPLIANCE-REPORT/#current-level-level-2-standard","title":"Current Level: Level 2 (Standard)","text":"<p>Per Section 12 of the RDCP Protocol Specification:</p>"},{"location":"PROTOCOL-COMPLIANCE-REPORT/#level-1-basic-met","title":"Level 1: Basic (Met)","text":"<ul> <li>Implements all required endpoints</li> <li>Security level: <code>basic</code> (API key authentication)</li> <li>Returns proper error codes</li> <li>Single-tenant or global configuration</li> <li>Optional audit logging</li> </ul>"},{"location":"PROTOCOL-COMPLIANCE-REPORT/#level-2-standard-met","title":"Level 2: Standard (Met)","text":"<ul> <li>All Level 1 requirements</li> <li>Security level: <code>standard</code> (Bearer tokens with scopes)</li> <li>Multi-tenancy support with isolation</li> <li>Performance metrics (placeholder implementation)</li> <li>User identity in audit trail</li> <li>Key rotation infrastructure</li> </ul>"},{"location":"PROTOCOL-COMPLIANCE-REPORT/#level-3-enterprise-partial","title":"Level 3: Enterprise (Partial)","text":"<ul> <li>All Level 2 requirements: Met</li> <li>Security level: <code>enterprise</code> (mTLS + tokens): Implemented</li> <li>Real performance metrics: Not implemented (placeholder values)</li> <li>Temporary controls with TTL: Implemented</li> <li>Rate limiting: Implemented</li> <li>Full audit trail with compliance metadata: Partially implemented</li> <li>Token refresh capability: Not implemented</li> <li>Multiple active keys per client: Not implemented</li> </ul>"},{"location":"PROTOCOL-COMPLIANCE-REPORT/#path-to-level-3-compliance","title":"Path to Level 3 Compliance","text":"<p>Required enhancements:</p> <ol> <li>Real Performance Metrics</li> <li>Replace placeholder values with actual measurements</li> <li> <p>Integrate Node.js <code>perf_hooks</code> and <code>process.memoryUsage()</code> APIs</p> </li> <li> <p>Enhanced Audit Trail</p> </li> <li>Add compliance metadata support</li> <li> <p>Implement tamper-evident audit logging</p> </li> <li> <p>Token Management</p> </li> <li>Add JWT refresh token capability</li> <li>Support multiple active API keys per client</li> </ol>"},{"location":"PROTOCOL-COMPLIANCE-REPORT/#testing-coverage","title":"Testing Coverage","text":""},{"location":"PROTOCOL-COMPLIANCE-REPORT/#test-suite-statistics","title":"Test Suite Statistics","text":"<ul> <li>220 passing tests across 34 test suites</li> <li>Framework coverage: Express, Fastify, Koa</li> <li>Authentication: Basic auth with RDCP header validation</li> <li>Validation: Request/response validation and error handling</li> <li>Integration: End-to-end endpoint functionality</li> </ul>"},{"location":"PROTOCOL-COMPLIANCE-REPORT/#protocol-specific-coverage","title":"Protocol-Specific Coverage","text":"<ul> <li>RDCP header validation per Section 3.2</li> <li>Standard error code validation</li> <li>JSON schema compliance</li> <li>Authentication method validation</li> <li>Multi-framework adapter testing</li> </ul>"},{"location":"PROTOCOL-COMPLIANCE-REPORT/#security-implementation","title":"Security Implementation","text":"<p>Per Section 8 of the RDCP Protocol Specification:</p>"},{"location":"PROTOCOL-COMPLIANCE-REPORT/#transport-security","title":"Transport Security","text":"<ul> <li>HTTPS: Production deployment ready</li> <li>HTTP: Localhost development support</li> </ul>"},{"location":"PROTOCOL-COMPLIANCE-REPORT/#authentication-security","title":"Authentication Security","text":"<ul> <li>API Key Length: 32+ character enforcement</li> <li>Constant-Time Comparison: Timing attack prevention</li> <li>JWT Validation: Signature and expiration checking</li> <li>Certificate Validation: X.509 parsing and validation</li> </ul>"},{"location":"PROTOCOL-COMPLIANCE-REPORT/#input-validation","title":"Input Validation","text":"<ul> <li>Request Validation: Zod schema-based</li> <li>Category Validation: Debug category existence checking</li> <li>Header Validation: Required RDCP headers enforced</li> <li>Type Safety: Full TypeScript coverage</li> </ul>"},{"location":"PROTOCOL-COMPLIANCE-REPORT/#standards-adherence","title":"Standards Adherence","text":""},{"location":"PROTOCOL-COMPLIANCE-REPORT/#rfc-compliance","title":"RFC Compliance","text":"<ul> <li>RFC 2119: Key words implementation (MUST, SHOULD, MAY)</li> <li>RFC 7231: HTTP/1.1 semantics</li> <li>RFC 8259: JSON data interchange format</li> </ul>"},{"location":"PROTOCOL-COMPLIANCE-REPORT/#protocol-versioning","title":"Protocol Versioning","text":"<ul> <li>Version Declaration: All responses include <code>\"protocol\": \"rdcp/1.0\"</code></li> <li>Endpoint Versioning: <code>/rdcp/v1/</code> URL pattern</li> <li>Backward Compatibility: Structure supports future versions</li> </ul>"},{"location":"PROTOCOL-COMPLIANCE-REPORT/#current-limitations","title":"Current Limitations","text":""},{"location":"PROTOCOL-COMPLIANCE-REPORT/#implementation-gaps","title":"Implementation Gaps","text":"<ol> <li>Performance Metrics</li> <li>Status: Placeholder values</li> <li>Impact: <code>measured: false</code> flag indicates estimated values</li> <li> <p>Enhancement: Requires integration of real-time monitoring</p> </li> <li> <p>Audit Trail</p> </li> <li>Status: Basic implementation</li> <li>Impact: Limited compliance metadata</li> <li> <p>Enhancement: Enterprise-level audit capabilities needed</p> </li> <li> <p>Token Management</p> </li> <li>Status: Not implemented</li> <li>Impact: No JWT refresh or multi-key support</li> <li>Enhancement: Required for Level 3 compliance</li> </ol>"},{"location":"PROTOCOL-COMPLIANCE-REPORT/#optional-features-not-required","title":"Optional Features (Not Required)","text":"<ul> <li><code>/rdcp/v1/metrics</code> endpoint: Not required by specification</li> <li><code>/rdcp/v1/tenants</code> endpoint: Not required by specification</li> <li><code>/rdcp/v1/audit</code> endpoint: Not required by specification</li> </ul>"},{"location":"PROTOCOL-COMPLIANCE-REPORT/#compliance-assessment","title":"Compliance Assessment","text":""},{"location":"PROTOCOL-COMPLIANCE-REPORT/#quantitative-analysis","title":"Quantitative Analysis","text":"Category Compliance Notes Required Endpoints 100% All implemented Authentication 100% All 3 levels Multi-Tenancy 100% Full support Error Handling 100% Specification-compliant Response Formats 100% Schema-compliant Client SDK 100% Complete Testing Coverage 95% Comprehensive Performance Metrics 60% Placeholder values Advanced Features 60% Partial Level 3 features Documentation 100% Complete <p>Overall Compliance: 88% (Level 2: Standard)</p>"},{"location":"PROTOCOL-COMPLIANCE-REPORT/#summary","title":"Summary","text":"<p>The RDCP SDK achieves Level 2 (Standard) compliance with RDCP v1.0 Protocol Specification. All required endpoints, authentication levels, and multi-tenancy features are implemented according to specification. The implementation includes comprehensive testing (220 tests), RFC compliance, and support for major Node.js frameworks.</p> <p>Level 3 (Enterprise) compliance requires enhancements in performance monitoring, audit trail capabilities, and token management. These are identified enhancement paths rather than current deficiencies, as Level 2 compliance meets the standard requirements for runtime debug control in production applications.</p>"},{"location":"compliance-kit/","title":"Compliance Kit (v1.0)","text":"<p>Use this kit to test RDCP v1.0 implementations:</p> <ul> <li>Download fixtures in compliance-kit/v1.0/</li> <li>Follow README for curl instructions</li> <li>See assertions and the enable\u2011and\u2011verify sequence for behavior checks</li> </ul> <p>CI: The repository validates fixtures against JSON Schemas on each PR.</p>"},{"location":"error-codes/","title":"RDCP Protocol Error Codes","text":"<p>This file is generated. Do not edit manually.</p> Code HTTP Status Description <code>RDCP_AUDIT_WRITE_FAILED</code> 500 Audit write failed <code>RDCP_AUTH_REQUIRED</code> 401 Authentication required <code>RDCP_CATEGORY_NOT_FOUND</code> 404 Category not found <code>RDCP_CONFIGURATION_ERROR</code> 500 Configuration error <code>RDCP_FORBIDDEN</code> 403 Insufficient permissions <code>RDCP_INTERNAL_ERROR</code> 500 Internal server error <code>RDCP_INVALID_ACTION</code> 400 Invalid control action <code>RDCP_INVALID_CATEGORY</code> 400 Invalid category specified <code>RDCP_INVALID_CLIENT</code> 403 Invalid client or credentials <code>RDCP_INVALID_PROTOCOL</code> 400 Unsupported or invalid protocol usage <code>RDCP_INVALID_TOKEN</code> 401 Token invalid <code>RDCP_MALFORMED_REQUEST</code> 400 Malformed request payload <code>RDCP_MISSING_PARAMETER</code> 400 Required parameter missing <code>RDCP_NOT_FOUND</code> 404 Resource not found <code>RDCP_RATE_LIMITED</code> 429 Rate limit exceeded <code>RDCP_RATE_LIMIT_MISCONFIGURED</code> 500 Rate limit configuration error <code>RDCP_REQUEST_ID_INVALID</code> 400 Invalid request identifier <code>RDCP_SERVER_ERROR</code> 500 Server error <code>RDCP_STORAGE_ERROR</code> 500 Storage error <code>RDCP_TIMEOUT</code> 504 Request timed out <code>RDCP_TOKEN_EXPIRED</code> 401 Token expired <code>RDCP_UNAVAILABLE</code> 503 Service unavailable <code>RDCP_UNSUPPORTED_VERSION</code> 400 Unsupported protocol version <code>RDCP_VALIDATION_ERROR</code> 400 Request validation failed"},{"location":"protocol-schemas/","title":"RDCP Protocol Schemas (Zod)","text":"<p>As of PR #42, protocol-level Zod schemas are centralized in <code>@rdcp.dev/core</code>. The server package re-exports these schemas for backward compatibility, but new code should import from core.</p> <p>Exports</p> <p>Schemas: - protocolVersionSchema - controlRequestSchema - controlResponseSchema - discoveryResponseSchema - statusResponseSchema - healthResponseSchema - protocolDiscoverySchema - errorResponseSchema</p> <p>Fixtures (sample typed payloads): - protocolVersionFixture - controlRequestEnableFixture | controlRequestDisableFixture | controlRequestResetFixture | controlRequestStatusFixture - controlResponseFixture - discoveryResponseFixture - statusResponseFixture - healthResponseFixture - protocolDiscoveryFixture - errorResponseFixture</p> <p>Usage</p> <p>Validate incoming requests (recommended):</p> <pre><code>import { controlRequestSchema } from '@rdcp.dev/core'\n\nconst result = controlRequestSchema.safeParse(req.body)\nif (!result.success) {\n  // handle validation errors\n}\n</code></pre> <p>Typed validation with Zod:</p> <pre><code>import { z } from 'zod'\nimport { controlRequestSchema } from '@rdcp.dev/core'\n\ntype ControlRequest = z.infer&lt;typeof controlRequestSchema&gt;\n\nfunction validate(body: unknown): ControlRequest {\n  return controlRequestSchema.parse(body)\n}\n</code></pre> <p>Constants, schemas, and fixtures together:</p> <pre><code>import {\n  PROTOCOL_VERSION,\n  RDCP_HEADERS,\n  RDCP_PATHS,\n  controlRequestSchema,\n  controlRequestEnableFixture,\n  discoveryResponseFixture,\n} from '@rdcp.dev/core'\n\n// Use fixtures in tests or examples\nconst req = controlRequestEnableFixture\nconst discovery = discoveryResponseFixture\n</code></pre> <p>Back-compat import (still supported):</p> <pre><code>import {\n  controlRequestSchema,\n  controlRequestEnableFixture,\n} from '@rdcp.dev/server'\n</code></pre> <p>Notes</p> <ul> <li>Core remains protocol-only (no framework/server coupling). Schemas use a minimal runtime dependency on <code>zod</code>.</li> <li>Additions to schemas are semver-minor; breaking changes are semver-major.</li> <li>See also: docs/core-package-boundaries.md and docs/rdcp-protocol-specification.md.</li> </ul> <p>Centralized JSON Schema definitions ($defs)</p> <p>A machine-readable set of domain-specific primitives is provided at <code>docs/schemas/defs.json</code>. Downstream schemas should reference these via <code>$ref</code> instead of inlining patterns. This improves consistency between documentation, validation, and implementations.</p>"},{"location":"rdcp-implementation-guide/","title":"RDCP Implementation Guide - Add Runtime Debug Control in 30 Minutes","text":"<p>Based on: Runtime Debug Control Protocol (RDCP) v1.0 Specification Target: Developers adding RDCP compliance to existing applications Goal: Mechanical implementation requiring zero design decisions  </p>"},{"location":"rdcp-implementation-guide/#prerequisites-checklist","title":"\ud83d\udccb Prerequisites Checklist","text":"<ul> <li>[ ] Existing application with debug/logging system</li> <li>[ ] Web framework that can create API endpoints  </li> <li>[ ] Node.js/JavaScript environment (adapt patterns for other languages)</li> <li>[ ] 30 minutes of development time</li> </ul>"},{"location":"rdcp-implementation-guide/#implementation-blueprint","title":"\ud83c\udfd7\ufe0f Implementation Blueprint","text":""},{"location":"rdcp-implementation-guide/#step-1-create-debug-configuration-object-5-minutes","title":"Step 1: Create Debug Configuration Object (5 minutes)","text":"<p>Requirement: Mutable runtime configuration for debug categories</p> <p>Implementation (copy exactly): <pre><code>// File: src/lib/rdcp-debug.js (or adapt to your structure)\n\n// 1. Define your debug categories (replace with your actual categories)\nexport const DEBUG_CONFIG = {\n  DATABASE: false,\n  API_ROUTES: false,\n  QUERIES: false,\n  REPORTS: false,\n  CACHE: false\n}\n\n// 2. Performance metrics (defined first to avoid circular dependency)\nconst metrics = {\n  callCount: 0,\n  startTime: Date.now(),\n  categoryStats: {}\n}\n\n// 3. Performance tracking function\nconst createTrackedDebugger = (category, logFn) =&gt; {\n  return (message, ...args) =&gt; {\n    if (DEBUG_CONFIG[category]) {\n      metrics.callCount++\n      metrics.categoryStats[category] = (metrics.categoryStats[category] || 0) + 1\n      return logFn(message, ...args)\n    }\n  }\n}\n\n// 4. Create debug functions with performance tracking\nexport const debug = {\n  database: createTrackedDebugger('DATABASE', (message, ...args) =&gt; \n    console.log(`\ud83d\udd0c [DB] ${message}`, ...args)\n  ),\n  api: createTrackedDebugger('API_ROUTES', (message, ...args) =&gt; \n    console.log(`\ud83d\udd0d [API] ${message}`, ...args)\n  ),\n  query: createTrackedDebugger('QUERIES', (message, ...args) =&gt; \n    console.log(`\ud83d\ude80 [QUERY] ${message}`, ...args)\n  ),\n  report: createTrackedDebugger('REPORTS', (message, ...args) =&gt; \n    console.log(`\ud83d\udcca [REPORT] ${message}`, ...args)\n  ),\n  cache: createTrackedDebugger('CACHE', (message, ...args) =&gt; \n    console.log(`\ud83d\udc1b [CACHE] ${message}`, ...args)\n  )\n}\n\n// 5. Runtime control functions\nexport const enableDebugCategories = (categories) =&gt; {\n  categories.forEach(category =&gt; {\n    if (category in DEBUG_CONFIG) {\n      DEBUG_CONFIG[category] = true\n    }\n  })\n}\n\nexport const disableDebugCategories = (categories) =&gt; {\n  categories.forEach(category =&gt; {\n    if (category in DEBUG_CONFIG) {\n      DEBUG_CONFIG[category] = false\n    }\n  })\n}\n\nexport const getDebugStatus = () =&gt; ({ ...DEBUG_CONFIG })\n\n// 6. Performance metrics functions\nexport const getPerformanceMetrics = () =&gt; {\n  const elapsed = (Date.now() - metrics.startTime) / 1000\n  const rate = elapsed &gt; 0 ? metrics.callCount / elapsed : 0\n  return {\n    callsPerSecond: rate,\n    totalCalls: metrics.callCount,\n    uptime: elapsed,\n    categoryBreakdown: { ...metrics.categoryStats }\n  }\n}\n\n// Reset metrics function\nexport const resetMetrics = () =&gt; {\n  metrics.callCount = 0\n  metrics.startTime = Date.now()\n  metrics.categoryStats = {}\n}\n\n// 7. Future-proofing hooks (add these for enterprise readiness)\nconst DEBUG_BUDGETS = {\n  maxLogsPerSecond: 100,\n  maxConcurrentCategories: 3,\n  budgetResetInterval: 3600000 // 1 hour\n}\n\n// OpenTelemetry integration hook\nlet otelIntegration = null\nexport function setOTelIntegration(tracer) {\n  otelIntegration = tracer\n}\n\n// AI anomaly detection hook\nlet aiEventHandler = null\nexport function setAIEventHandler(handler) {\n  aiEventHandler = handler\n}\n\n// Audit trail hook\nlet auditLogger = null\nexport function setAuditLogger(logger) {\n  auditLogger = logger\n}\n\n// Enhanced debug function with future-proofing\nconst createEnhancedDebugger = (category, logFn) =&gt; {\n  return (message, ...args) =&gt; {\n    if (DEBUG_CONFIG[category]) {\n      // Performance tracking\n      metrics.callCount++\n      metrics.categoryStats[category] = (metrics.categoryStats[category] || 0) + 1\n\n      // OpenTelemetry correlation\n      let traceContext = {}\n      if (otelIntegration) {\n        const span = otelIntegration.trace.getActiveSpan()\n        if (span) {\n          traceContext = {\n            traceId: span.spanContext().traceId,\n            spanId: span.spanContext().spanId\n          }\n        }\n      }\n\n      // Budget enforcement\n      const rate = metrics.callCount / ((Date.now() - metrics.startTime) / 1000)\n      if (rate &gt; DEBUG_BUDGETS.maxLogsPerSecond) {\n        console.warn(`\u26a0\ufe0f Debug rate limit exceeded: ${rate.toFixed(1)} logs/sec`)\n        // Could auto-disable here in production\n      }\n\n      // AI event emission\n      if (aiEventHandler) {\n        aiEventHandler('debug-event', {\n          category,\n          message,\n          metadata: args,\n          timestamp: Date.now(),\n          traceContext\n        })\n      }\n\n      // Audit logging for compliance\n      if (auditLogger &amp;&amp; category === 'DATABASE') {\n        auditLogger.log({\n          event: 'debug-output',\n          category,\n          timestamp: new Date().toISOString(),\n          complianceLevel: 'low'\n        })\n      }\n\n      // Standard console output with trace context\n      return logFn(message, { ...traceContext, ...args })\n    }\n  }\n}\n\n// Optional: Use enhanced debugger instead of basic\n// Uncomment to enable enterprise features:\n// const createTrackedDebugger = createEnhancedDebugger\n</code></pre></p>"},{"location":"rdcp-implementation-guide/#step-15-create-shared-utilities-optional-2-minutes","title":"Step 1.5: Create Shared Utilities (Optional - 2 minutes)","text":"<p>Optimization: Extract helper functions to avoid duplication across endpoints.</p> <pre><code>// File: lib/rdcp-utils.js\n\nexport function getCategoryEmoji(category) {\n  const emojiMap = {\n    DATABASE: '\ud83d\udd0c',\n    API_ROUTES: '\ud83d\udd0d',\n    QUERIES: '\ud83d\ude80',\n    REPORTS: '\ud83d\udcca',\n    CACHE: '\ud83d\udc1b'\n  }\n  return emojiMap[category] || '\ud83d\udcdd'\n}\n\nexport function getCategoryDescription(category) {\n  const descMap = {\n    DATABASE: 'Database connection and operations',\n    API_ROUTES: 'HTTP request and response handling',\n    QUERIES: 'SQL query execution and performance',\n    REPORTS: 'Report generation and processing',\n    CACHE: 'Cache operations and hits/misses'\n  }\n  return descMap[category] || 'Debug logging category'\n}\n\nexport function getCategoryTags(category) {\n  const tagMap = {\n    DATABASE: ['infrastructure', 'performance'],\n    API_ROUTES: ['api', 'request-response'],\n    QUERIES: ['database', 'performance'],\n    REPORTS: ['business-logic'],\n    CACHE: ['performance', 'optimization']\n  }\n  return tagMap[category] || ['general']\n}\n\n// Factory function to create category objects\nexport function createCategoryInfo(debugConfig) {\n  return Object.keys(debugConfig).map(id =&gt; ({\n    \"id\": id,\n    \"name\": id.replace('_', ' ').toLowerCase(),\n    \"emoji\": getCategoryEmoji(id),\n    \"enabled\": debugConfig[id],\n    \"priority\": \"medium\",\n    \"description\": getCategoryDescription(id),\n    \"tags\": getCategoryTags(id),\n    \"callCount\": 0,\n    \"estimatedOverhead\": \"low\"\n  }))\n}\n</code></pre>"},{"location":"rdcp-implementation-guide/#step-2-create-required-api-endpoints-15-minutes","title":"Step 2: Create Required API Endpoints (15 minutes)","text":"<p>Requirement: 5 RDCP-compliant endpoints with exact JSON schemas</p>"},{"location":"rdcp-implementation-guide/#21-protocol-discovery-endpoint","title":"2.1 Protocol Discovery Endpoint","text":"<pre><code>// File: routes/well-known-rdcp.js (adapt path to your framework)\n\nexport async function GET(request) {\n  return Response.json({\n    \"protocol\": \"rdcp/1.0\",\n    \"app\": {\n      \"name\": \"your-app-name\",  // CHANGE THIS\n      \"version\": \"1.0.0\",       // CHANGE THIS\n      \"environment\": process.env.NODE_ENV || \"development\"\n    },\n    \"endpoints\": {\n      \"discovery\": \"/rdcp/v1/discovery\",\n      \"control\": \"/rdcp/v1/control\",\n      \"status\": \"/rdcp/v1/status\",\n      \"health\": \"/rdcp/v1/health\"\n    },\n    \"capabilities\": {\n      \"runtimeToggle\": true,\n      \"categoryGranularity\": true,\n      \"performanceMonitoring\": true,\n      \"temporaryControl\": false,  // Start simple\n      \"bulkOperations\": true,\n      \"budgetEnforcement\": true,\n      \"kernelLevelInstrumentation\": false,  // eBPF ready\n      \"systemCallTracing\": false,\n      \"multiTenancy\": true\n    },\n    \"compliance\": {\n      \"level\": \"basic\",\n      \"auditTrail\": false,  // Enable in production\n      \"retentionDays\": 90,\n      \"standards\": [\"gdpr-ready\", \"sox-ready\"],\n      \"extensions\": []\n    },\n    \"integrations\": {\n      \"opentelemetry\": {\n        \"enabled\": false,  // Enable when configured\n        \"correlationSupport\": true,\n        \"semanticConventions\": [\"rdcp/1.0\"]\n      },\n      \"aiIntegration\": {\n        \"anomalyDetectionEnabled\": false,\n        \"predictiveAlertsSupported\": true,\n        \"contextEnrichment\": true\n      }\n    }\n  })\n}\n</code></pre>"},{"location":"rdcp-implementation-guide/#22-debug-system-discovery","title":"2.2 Debug System Discovery","text":"<pre><code>// File: app/rdcp/v1/discovery/route.js (Next.js App Router)\n// Or: routes/rdcp/v1/discovery.js (Express)\n\nimport { DEBUG_CONFIG, getPerformanceMetrics } from '../../../lib/rdcp-debug.js'\nimport { createCategoryInfo } from '../../../lib/rdcp-utils.js'\n\nexport async function GET(request) {\n  const categories = createCategoryInfo(DEBUG_CONFIG)\n\n  const metrics = getPerformanceMetrics()\n\n  return Response.json({\n    \"protocol\": \"rdcp/1.0\",\n    \"timestamp\": new Date().toISOString(),\n    \"debugSystem\": {\n      \"type\": \"centralized-config\",\n      \"implementation\": \"your-app-rdcp-v1\", // CHANGE THIS\n      \"version\": \"1.0.0\",\n      \"features\": [\"zero-overhead\", \"emoji-categories\"]\n    },\n    \"categories\": categories,\n    \"performance\": {\n      \"overhead\": {\n        \"cpu\": {\n          \"value\": 0.1,\n          \"unit\": \"percent\",\n          \"measured\": false  // Placeholder for now\n        },\n        \"memory\": {\n          \"value\": 1048576,  // 1MB in bytes\n          \"unit\": \"bytes\",\n          \"measured\": false\n        },\n        \"logsPerSecond\": {\n          \"value\": metrics.callsPerSecond,\n          \"unit\": \"per_second\",\n          \"measured\": true\n        }\n      }\n    },\n    \"metadata\": {\n      \"lastReset\": new Date().toISOString(),\n      \"configurationHash\": \"initial\",\n      \"complianceLevel\": \"basic\"\n    }\n  })\n}\n</code></pre> <p>Note: If you didn't create the shared utilities (Step 1.5), define the helper functions inline here.</p>"},{"location":"rdcp-implementation-guide/#23-runtime-control-endpoint","title":"2.3 Runtime Control Endpoint","text":"<pre><code>// File: app/rdcp/v1/control/route.js (Next.js App Router)\n\nimport { enableDebugCategories, disableDebugCategories, getDebugStatus, resetMetrics } from '../../../lib/rdcp-debug.js'\nimport { validateControlRequest } from '../../../lib/rdcp-validation.js'\nimport { withRDCPAuth } from '../../../lib/rdcp-auth/index.js'\n\n// Standard error response format\nfunction createValidationError(message) {\n  return Response.json(\n    { \n      error: message, \n      code: 'RDCP_VALIDATION_ERROR',\n      protocol: 'rdcp/1.0' \n    },\n    { status: 400 }\n  )\n}\n\nexport const POST = withRDCPAuth(async function(request) {\n  const body = await request.json()\n\n  // Validate request using schema\n  const validation = validateControlRequest(body)\n  if (!validation.valid) {\n    return createValidationError(validation.error)\n  }\n\n  const timestamp = new Date().toISOString()\n  const requestId = body.requestId || `req_${Date.now()}`\n  const changes = []\n\n  // Multi-tenancy support (extract from auth context)\n  const tenantId = request.headers.get('x-tenant-id') || 'default'\n\n  // Audit trail for compliance\n  const auditEntry = {\n    timestamp,\n    requestId,\n    action: body.action,\n    categories: body.categories,\n    operator: body.options?.operator || 'system',\n    justification: body.options?.reason || 'operational',\n    tenantId,\n    complianceRisk: 'low'\n  }\n\n  // Handle different actions\n  switch (body.action) {\n    case 'enable':\n      const categoriesToEnable = Array.isArray(body.categories) ? body.categories : [body.categories]\n      enableDebugCategories(categoriesToEnable)\n      changes.push(...categoriesToEnable.map(cat =&gt; ({\n        category: cat,\n        action: 'enabled',\n        previousState: false, // Could track this\n        newState: true,\n        effectiveTime: timestamp\n      })))\n      break\n\n    case 'disable':\n      const categoriesToDisable = Array.isArray(body.categories) ? body.categories : [body.categories]\n      disableDebugCategories(categoriesToDisable)\n      changes.push(...categoriesToDisable.map(cat =&gt; ({\n        category: cat,\n        action: 'disabled',\n        previousState: true,\n        newState: false,\n        effectiveTime: timestamp\n      })))\n      break\n\n    case 'enable-all':\n      const allCategories = Object.keys(DEBUG_CONFIG)\n      enableDebugCategories(allCategories)\n      changes.push(...allCategories.map(cat =&gt; ({\n        category: cat,\n        action: 'enabled',\n        previousState: DEBUG_CONFIG[cat],\n        newState: true,\n        effectiveTime: timestamp\n      })))\n      break\n\n    case 'disable-all':\n      const allCats = Object.keys(DEBUG_CONFIG)\n      disableDebugCategories(allCats)\n      changes.push(...allCats.map(cat =&gt; ({\n        category: cat,\n        action: 'disabled', \n        previousState: DEBUG_CONFIG[cat],\n        newState: false,\n        effectiveTime: timestamp\n      })))\n      break\n\n    case 'reset':\n      const allCatsForReset = Object.keys(DEBUG_CONFIG)\n      disableDebugCategories(allCatsForReset)\n      resetMetrics() // Reset performance metrics\n      changes.push({\n        category: 'ALL',\n        action: 'reset',\n        previousState: 'mixed',\n        newState: 'disabled',\n        effectiveTime: timestamp\n      })\n      break\n\n    default:\n      return createValidationError(`Unknown action: ${body.action}`)\n  }\n\n  const currentState = getDebugStatus()\n\n  return Response.json({\n    \"protocol\": \"rdcp/1.0\",\n    \"requestId\": requestId,\n    \"success\": true,\n    \"timestamp\": timestamp,\n    \"changes\": changes,\n    \"currentState\": Object.keys(currentState).reduce((acc, key) =&gt; {\n      acc[key] = {\n        enabled: currentState[key],\n        temporary: false\n      }\n      return acc\n    }, {}),\n    \"performance\": {\n      \"newProjectedOverhead\": {\n        \"cpu\": \"0.1%\", // Update based on enabled categories\n        \"memory\": \"1MB\",\n        \"logsPerSecond\": 1.0\n      }\n    }\n  })\n}\n</code></pre>"},{"location":"rdcp-implementation-guide/#24-status-monitoring-endpoint","title":"2.4 Status Monitoring Endpoint","text":"<pre><code>// File: app/rdcp/v1/status/route.js (Next.js App Router)\n\nimport { getDebugStatus, getPerformanceMetrics } from '../../../lib/rdcp-debug.js'\n\nexport async function GET(request) {\n  const status = getDebugStatus()\n  const metrics = getPerformanceMetrics()\n\n  const categories = {}\n  Object.keys(status).forEach(category =&gt; {\n    if (status[category]) {\n      categories[category] = {\n        enabled: true,\n        activeCallCount: 0, // Could track this\n        callsInLastMinute: 0, // Could track this\n        totalCallsToday: 0, // Could track this\n        lastActivity: new Date().toISOString(),\n        averageLatency: \"1ms\"\n      }\n    }\n  })\n\n  return Response.json({\n    \"protocol\": \"rdcp/1.0\",\n    \"timestamp\": new Date().toISOString(),\n    \"categories\": categories,\n    \"performance\": {\n      \"realtime\": {\n        \"logsPerSecond\": metrics.callsPerSecond,\n        \"memoryUsage\": \"1MB\",\n        \"cpuImpact\": \"0.1%\"\n      },\n      \"trends\": {\n        \"last5Minutes\": {\n          \"averageLogsPerSecond\": metrics.callsPerSecond,\n          \"peakLogsPerSecond\": metrics.callsPerSecond * 2\n        }\n      }\n    }\n  })\n}\n</code></pre>"},{"location":"rdcp-implementation-guide/#25-health-check-endpoint","title":"2.5 Health Check Endpoint","text":"<pre><code>// File: app/rdcp/v1/health/route.js (Next.js App Router)\n\nimport { DEBUG_CONFIG } from '../../../lib/rdcp-debug.js'\n\nexport async function GET(request) {\n  return Response.json({\n    \"protocol\": \"rdcp/1.0\",\n    \"status\": \"healthy\",\n    \"timestamp\": new Date().toISOString(),\n    \"debugSystemOperational\": true,\n    \"details\": {\n      \"categoriesResponsive\": Object.keys(DEBUG_CONFIG).length,\n      \"categoriesError\": 0,\n      \"controlEndpointLatency\": \"5ms\",\n      \"lastSuccessfulReset\": new Date().toISOString()\n    },\n    \"version\": {\n      \"protocol\": \"rdcp/1.0\",\n      \"implementation\": \"your-app-rdcp-v1.0.0\" // CHANGE THIS\n    }\n  })\n}\n</code></pre>"},{"location":"rdcp-implementation-guide/#step-3-add-route-registration-5-minutes","title":"Step 3: Add Route Registration (5 minutes)","text":"<p>Framework-specific step - register the routes according to your framework:</p>"},{"location":"rdcp-implementation-guide/#nextjs-app-router","title":"Next.js App Router","text":"<pre><code>// File structure auto-registers routes:\n// .well-known/rdcp/route.js\n// rdcp/v1/discovery/route.js\n// rdcp/v1/control/route.js\n// rdcp/v1/status/route.js  \n// rdcp/v1/health/route.js\n</code></pre>"},{"location":"rdcp-implementation-guide/#expressjs","title":"Express.js","text":"<pre><code>// File: server.js\nimport express from 'express'\nimport { \n  DEBUG_CONFIG, \n  getPerformanceMetrics, \n  enableDebugCategories, \n  disableDebugCategories, \n  getDebugStatus,\n  resetMetrics \n} from './lib/rdcp-debug.js'\nimport { validateRDCPAuth } from './lib/rdcp-auth/index.js'\nimport { validateControlRequest } from './lib/rdcp-validation.js'\nimport { createCategoryInfo } from './lib/rdcp-utils.js'\n\nconst app = express()\napp.use(express.json())\n\n// Express-specific endpoint handlers\nconst rdcpDiscovery = (req, res) =&gt; {\n  res.json({\n    \"protocol\": \"rdcp/1.0\",\n    \"app\": {\n      \"name\": \"your-express-app\",  // CHANGE THIS\n      \"version\": \"1.0.0\",           // CHANGE THIS\n      \"environment\": process.env.NODE_ENV || \"development\"\n    },\n    \"endpoints\": {\n      \"discovery\": \"/rdcp/v1/discovery\",\n      \"control\": \"/rdcp/v1/control\",\n      \"status\": \"/rdcp/v1/status\",\n      \"health\": \"/rdcp/v1/health\"\n    },\n    \"capabilities\": {\n      \"runtimeToggle\": true,\n      \"categoryGranularity\": true,\n      \"performanceMonitoring\": true,\n      \"temporaryControl\": false,\n      \"bulkOperations\": true\n    },\n    \"compliance\": {\n      \"level\": \"basic\",\n      \"extensions\": []\n    }\n  })\n}\n\nconst debugDiscovery = (req, res) =&gt; {\n  const categories = createCategoryInfo(DEBUG_CONFIG)\n\n  const metrics = getPerformanceMetrics()\n\n  res.json({\n    \"protocol\": \"rdcp/1.0\",\n    \"timestamp\": new Date().toISOString(),\n    \"debugSystem\": {\n      \"type\": \"centralized-config\",\n      \"implementation\": \"your-app-rdcp-v1\", // CHANGE THIS\n      \"version\": \"1.0.0\",\n      \"features\": [\"zero-overhead\", \"emoji-categories\"]\n    },\n    \"categories\": categories,\n    \"performance\": {\n      \"currentOverhead\": {\n        \"cpu\": \"0.1%\",\n        \"memory\": \"1MB\",\n        \"logsPerSecond\": metrics.callsPerSecond\n      }\n    },\n    \"metadata\": {\n      \"lastReset\": new Date().toISOString(),\n      \"configurationHash\": \"initial\",\n      \"complianceLevel\": \"basic\"\n    }\n  })\n}\n\nconst debugControl = (req, res) =&gt; {\n  // Authentication check\n  const auth = validateRDCPAuth(req)\n  if (!auth.valid) {\n    return res.status(401).json({\n      error: {\n        code: 'RDCP_AUTH_FAILED',\n        message: 'Authentication failed',\n        protocol: 'rdcp/1.0'\n      }\n    })\n  }\n\n  const body = req.body\n  const validation = validateControlRequest(body)\n\n  if (!validation.valid) {\n    return res.status(400).json({\n      error: validation.error,\n      code: 'RDCP_VALIDATION_ERROR',\n      protocol: 'rdcp/1.0'\n    })\n  }\n\n  // Handle actions (same logic as Next.js, adapted for Express)\n  const timestamp = new Date().toISOString()\n  const requestId = body.requestId || `req_${Date.now()}`\n  const changes = []\n\n  switch (body.action) {\n    case 'enable':\n      const toEnable = Array.isArray(body.categories) ? body.categories : [body.categories]\n      enableDebugCategories(toEnable)\n      // ... add to changes array\n      break\n    // ... other cases\n  }\n\n  res.json({\n    \"protocol\": \"rdcp/1.0\",\n    \"requestId\": requestId,\n    \"success\": true,\n    \"timestamp\": timestamp,\n    \"changes\": changes,\n    \"currentState\": getDebugStatus()\n    // ... rest of response\n  })\n}\n\nconst debugStatus = (req, res) =&gt; {\n  const status = getDebugStatus()\n  const metrics = getPerformanceMetrics()\n\n  res.json({\n    \"protocol\": \"rdcp/1.0\",\n    \"timestamp\": new Date().toISOString(),\n    \"categories\": status,\n    \"performance\": {\n      \"overhead\": {\n        \"logsPerSecond\": {\n          \"value\": metrics.callsPerSecond,\n          \"unit\": \"per_second\",\n          \"measured\": true\n        }\n      }\n    }\n  })\n}\n\nconst debugHealth = (req, res) =&gt; {\n  res.json({\n    \"protocol\": \"rdcp/1.0\",\n    \"status\": \"healthy\",\n    \"timestamp\": new Date().toISOString(),\n    \"debugSystemOperational\": true,\n    \"details\": {\n      \"categoriesResponsive\": Object.keys(DEBUG_CONFIG).length,\n      \"categoriesError\": 0,\n      \"controlEndpointLatency\": \"5ms\",\n      \"lastSuccessfulReset\": new Date().toISOString()\n    },\n    \"version\": {\n      \"protocol\": \"rdcp/1.0\",\n      \"implementation\": \"your-app-rdcp-v1.0.0\" // CHANGE THIS\n    }\n  })\n}\n\n// Register RDCP endpoints\n\n// Note: Helper functions moved to lib/rdcp-utils.js to avoid duplication\napp.get('/.well-known/rdcp', rdcpDiscovery)\napp.get('/rdcp/v1/discovery', debugDiscovery)\napp.post('/rdcp/v1/control', debugControl)\napp.get('/rdcp/v1/status', debugStatus)\napp.get('/rdcp/v1/health', debugHealth)\n</code></pre>"},{"location":"rdcp-implementation-guide/#fastify","title":"Fastify","text":"<pre><code>// File: server.js\nimport Fastify from 'fastify'\nimport { rdcpDiscovery, debugDiscovery, debugControl, debugStatus, debugHealth } from './rdcp-endpoints.js'\n\nconst fastify = Fastify({ logger: true })\n\n// RDCP endpoints\nfastify.get('/.well-known/rdcp', rdcpDiscovery)\nfastify.get('/rdcp/v1/discovery', debugDiscovery)\nfastify.post('/rdcp/v1/control', debugControl)\nfastify.get('/rdcp/v1/status', debugStatus)\nfastify.get('/rdcp/v1/health', debugHealth)\n</code></pre>"},{"location":"rdcp-implementation-guide/#koajs","title":"Koa.js","text":"<pre><code>// File: server.js\nimport Koa from 'koa'\nimport Router from 'koa-router'\nimport { rdcpDiscovery, debugDiscovery, debugControl, debugStatus, debugHealth } from './rdcp-endpoints.js'\n\nconst app = new Koa()\nconst router = new Router()\n\n// RDCP endpoints\nrouter.get('/.well-known/rdcp', rdcpDiscovery)\nrouter.get('/rdcp/v1/discovery', debugDiscovery)\nrouter.post('/rdcp/v1/control', debugControl)\nrouter.get('/rdcp/v1/status', debugStatus)\nrouter.get('/rdcp/v1/health', debugHealth)\n\napp.use(router.routes())\n</code></pre>"},{"location":"rdcp-implementation-guide/#step-4-add-authentication-based-on-security-level-5-10-minutes","title":"Step 4: Add Authentication Based on Security Level (5-10 minutes)","text":""},{"location":"rdcp-implementation-guide/#option-a-basic-level-api-key-developmentinternal","title":"Option A: Basic Level (API Key) - Development/Internal","text":"<pre><code>// File: lib/rdcp-auth.js\n\nimport crypto from 'crypto'\n\nconst RDCP_API_KEY = process.env.RDCP_API_KEY || 'dev-key-change-in-production-min-32-chars'\n\nfunction extractApiKey(request) {\n  // Framework detection - Next.js has headers.get(), Express has headers[]\n  if (typeof request.headers.get === 'function') {\n    // Next.js Request object\n    const authHeader = request.headers.get('authorization')\n    const apiKeyHeader = request.headers.get('x-api-key')\n    return authHeader?.replace('Bearer ', '') || apiKeyHeader\n  } else {\n    // Express/Node.js request object\n    const authHeader = request.headers['authorization']\n    const apiKeyHeader = request.headers['x-api-key']\n    return authHeader?.replace('Bearer ', '') || apiKeyHeader\n  }\n}\n\nexport function validateRDCPAuth(request) {\n  const providedKey = extractApiKey(request)\n\n  // Basic security checks\n  if (!providedKey || providedKey.length &lt; 32) {\n    return false\n  }\n\n  if (!RDCP_API_KEY || RDCP_API_KEY.length &lt; 32) {\n    console.error('RDCP_API_KEY must be at least 32 characters for security')\n    return false\n  }\n\n  try {\n    // Constant-time comparison to prevent timing attacks\n    return crypto.timingSafeEqual(\n      Buffer.from(RDCP_API_KEY),\n      Buffer.from(providedKey)\n    )\n  } catch (error) {\n    // Keys are different lengths - return false without revealing why\n    return false\n  }\n}\n\n// Standard error response for authentication failure\nfunction createAuthError() {\n  return Response.json(\n    { \n      error: 'Authentication required', \n      code: 'RDCP_AUTH_REQUIRED',\n      protocol: 'rdcp/1.0'\n    },\n    { status: 401 }\n  )\n}\n\n// Middleware for protected endpoints\nexport function withRDCPAuth(handler) {\n  return async function(request) {\n    const ok = validateRDCPAuth(request)\n    if (!ok) {\n      return createAuthError()\n    }\n    return handler(request)\n  }\n}\n</code></pre>"},{"location":"rdcp-implementation-guide/#option-b-standard-level-jwt-bearer-token-production-saas","title":"Option B: Standard Level (JWT Bearer Token) - Production SaaS","text":"<pre><code>// File: lib/rdcp-auth-jwt.js\n\nimport jwt from 'jsonwebtoken'\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'change-in-production'\n\nexport function validateRDCPAuth(request) {\n  const authHeader = request.headers.get('authorization')\n\n  if (!authHeader?.startsWith('Bearer ')) {\n    return {\n      valid: false,\n      error: 'Missing Bearer token'\n    }\n  }\n\n  const token = authHeader.substring(7)\n\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET)\n\n    // Return standard auth context\n    return {\n      valid: true,\n      method: 'bearer',\n      userId: decoded.sub || decoded.email,\n      tenantId: decoded.org_id || decoded.tenant,\n      scopes: decoded.scopes || ['discovery', 'status'],\n      sessionId: decoded.session_id,\n      expiresAt: new Date(decoded.exp * 1000).toISOString()\n    }\n  } catch (error) {\n    return {\n      valid: false,\n      error: error.message\n    }\n  }\n}\n\n// Standard error response\nexport function createAuthError() {\n  return Response.json(\n    {\n      error: {\n        code: 'RDCP_AUTH_FAILED',\n        message: 'Authentication failed',\n        method: 'bearer',\n        protocol: 'rdcp/1.0'\n      }\n    },\n    { status: 401 }\n  )\n}\n</code></pre>"},{"location":"rdcp-implementation-guide/#option-c-enterprise-level-mtls-regulated-industries","title":"Option C: Enterprise Level (mTLS) - Regulated Industries","text":"<pre><code>// File: lib/rdcp-auth-mtls.js\n// File: lib/rdcp-auth-mtls.js\n\nimport { X509Certificate } from 'crypto'\n\nexport function validateRDCPAuth(request) {\n  // Extract client certificate from request\n  const certHeader = request.headers.get('x-client-cert')\n  const certSubject = request.headers.get('x-rdcp-cert-subject')\n\n  if (!certHeader) {\n    return {\n      valid: false,\n      error: 'Client certificate required'\n    }\n  }\n\n  try {\n    // Validate certificate\n    const cert = new X509Certificate(Buffer.from(certHeader, 'base64'))\n\n    // Check certificate validity\n    const now = new Date()\n    if (now &lt; cert.validFrom || now &gt; cert.validTo) {\n      return {\n        valid: false,\n        error: 'Certificate expired or not yet valid'\n      }\n    }\n\n    // Extract identity from certificate\n    const subject = cert.subject\n    const cn = subject.match(/CN=([^,]+)/)?.[1]\n\n    // Also check for JWT token for additional context\n    const authHeader = request.headers.get('authorization')\n    let tokenContext = {}\n\n    if (authHeader?.startsWith('Bearer ')) {\n      // Hybrid mode: mTLS + JWT\n      const token = authHeader.substring(7)\n      const decoded = jwt.verify(token, JWT_SECRET)\n      tokenContext = {\n        userId: decoded.sub,\n        scopes: decoded.scopes\n      }\n    }\n\n    return {\n      valid: true,\n      method: 'mtls',\n      userId: tokenContext.userId || cn,\n      tenantId: extractTenantFromCN(cn),\n      scopes: tokenContext.scopes || ['admin'],\n      sessionId: cert.fingerprint,\n      metadata: {\n        certSubject: cert.subject,\n        certIssuer: cert.issuer,\n        certFingerprint: cert.fingerprint\n      }\n    }\n  } catch (error) {\n    return {\n      valid: false,\n      error: error.message\n    }\n  }\n}\n\nfunction extractTenantFromCN(cn) {\n  // Example: CN=client.tenant123.example.com\n  const match = cn?.match(/\\.([^.]+)\\.example\\.com$/)\n  return match?.[1] || 'default'\n}\n</code></pre>"},{"location":"rdcp-implementation-guide/#unified-auth-adapter-recommended","title":"Unified Auth Adapter (Recommended)","text":"<pre><code>// File: lib/rdcp-auth/index.js\n// Selects the appropriate auth validator based on RDCP_AUTH_LEVEL\n\nimport { validateRDCPAuth as validateApiKey } from '../rdcp-auth.js'\nimport { validateRDCPAuth as validateJwt } from '../rdcp-auth-jwt.js'\nimport { validateRDCPAuth as validateMtls } from '../rdcp-auth-mtls.js'\n\nconst LEVEL = (process.env.RDCP_AUTH_LEVEL || 'basic').toLowerCase()\n\nfunction normalize(result, method) {\n  if (result &amp;&amp; typeof result === 'object' &amp;&amp; 'valid' in result) return result\n  return {\n    valid: !!result,\n    method,\n    scopes: ['discovery', 'status', 'control', 'health']\n  }\n}\n\nexport function validateRDCPAuth(request) {\n  switch (LEVEL) {\n    case 'enterprise':\n      return normalize(validateMtls(request), 'mtls')\n    case 'standard':\n    case 'bearer':\n      return normalize(validateJwt(request), 'bearer')\n    case 'basic':\n    default:\n      return normalize(validateApiKey(request), 'api-key')\n  }\n}\n\nexport function withRDCPAuth(handler) {\n  return async function(request) {\n    const auth = validateRDCPAuth(request)\n    if (!auth.valid) {\n      return Response.json(\n        { error: { code: 'RDCP_AUTH_FAILED', message: 'Authentication failed', protocol: 'rdcp/1.0' } },\n        { status: 401 }\n      )\n    }\n    // Attach auth context for downstream usage\n    request.rdcpAuth = auth\n    return handler(request)\n  }\n}\n</code></pre>"},{"location":"rdcp-implementation-guide/#verification-steps","title":"\u2705 Verification Steps","text":""},{"location":"rdcp-implementation-guide/#test-your-implementation","title":"Test Your Implementation","text":""},{"location":"rdcp-implementation-guide/#basic-functionality-tests","title":"Basic Functionality Tests","text":"<pre><code># 1. Discovery endpoint (should return RDCP info)\ncurl -s http://localhost:3000/.well-known/rdcp | jq\n# Expected: JSON with protocol, app, endpoints, capabilities\n\n# 2. Debug system info  \ncurl -s http://localhost:3000/rdcp/v1/discovery | jq\n# Expected: JSON with categories, performance, metadata\n\n# 3. Enable debug category\ncurl -X POST http://localhost:3000/rdcp/v1/control \\\n  -H \"X-API-Key: dev-key-change-in-production-min-32-chars\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"action\":\"enable\",\"categories\":[\"DATABASE\"]}' | jq\n# Expected: Success response with changes array\n\n# 4. Check status (should show DATABASE enabled)\ncurl -s http://localhost:3000/rdcp/v1/status | jq\n# Expected: categories object with DATABASE entry\n\n# 5. Health check\ncurl -s http://localhost:3000/rdcp/v1/health | jq\n# Expected: status: \"healthy\", debugSystemOperational: true\n</code></pre>"},{"location":"rdcp-implementation-guide/#error-handling-tests","title":"Error Handling Tests","text":"<pre><code># Test authentication failure\ncurl -X POST http://localhost:3000/rdcp/v1/control \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"action\":\"enable\",\"categories\":[\"DATABASE\"]}' | jq\n# Expected: 401 Unauthorized with RDCP_AUTH_REQUIRED code\n\n# Test invalid API key\ncurl -X POST http://localhost:3000/rdcp/v1/control \\\n  -H \"X-API-Key: short-key\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"action\":\"enable\",\"categories\":[\"DATABASE\"]}' | jq\n# Expected: 401 Unauthorized\n\n# Test invalid action\ncurl -X POST http://localhost:3000/rdcp/v1/control \\\n  -H \"X-API-Key: dev-key-change-in-production-min-32-chars\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"action\":\"invalid\",\"categories\":[\"DATABASE\"]}' | jq\n# Expected: 400 Bad Request with error message\n\n# Test missing required fields\ncurl -X POST http://localhost:3000/rdcp/v1/control \\\n  -H \"X-API-Key: dev-key-change-in-production-min-32-chars\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"action\":\"enable\"}' | jq\n# Expected: 400 Bad Request with missing fields error\n\n# Test invalid category\ncurl -X POST http://localhost:3000/rdcp/v1/control \\\n  -H \"X-API-Key: dev-key-change-in-production-min-32-chars\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"action\":\"enable\",\"categories\":[\"INVALID_CATEGORY\"]}' | jq\n# Expected: Success but no changes (invalid categories ignored)\n</code></pre>"},{"location":"rdcp-implementation-guide/#verify-debug-output","title":"Verify Debug Output","text":"<pre><code>// In your application code\nimport { debug } from './lib/rdcp-debug.js'\n\n// This should now be controlled by RDCP\ndebug.database('Connection pool initialized')\ndebug.api('Processing request', { method: 'GET', path: '/users' })\n</code></pre>"},{"location":"rdcp-implementation-guide/#success-criteria","title":"\ud83d\udcca Success Criteria","text":"<ul> <li>[ ] All 5 endpoints return valid JSON responses</li> <li>[ ] Debug categories can be enabled/disabled via API</li> <li>[ ] Debug output appears/disappears based on runtime control</li> <li>[ ] No application restart required for debug changes</li> <li>[ ] Performance metrics are tracked (even if basic)</li> <li>[ ] API key authentication works</li> </ul>"},{"location":"rdcp-implementation-guide/#enhancement-path","title":"\ud83d\udd04 Enhancement Path","text":"<p>After basic implementation works:</p> <ol> <li>Enhanced Performance Tracking: Add memory usage, CPU impact measurement</li> <li>Temporary Controls: Add time-based auto-disable functionality  </li> <li>Advanced Authentication: JWT tokens, role-based access</li> <li>Integration: OpenTelemetry, Prometheus metrics export</li> <li>UI: Build admin interface consuming these APIs</li> </ol> <p>The key: Start with this mechanical implementation, then enhance based on real usage.</p>"},{"location":"rdcp-implementation-guide/#future-proofing-industry-trends","title":"\ud83c\udf10 Future-Proofing &amp; Industry Trends","text":"<p>The basic implementation includes hooks for emerging industry trends. These are disabled by default but prevent architectural lock-in:</p>"},{"location":"rdcp-implementation-guide/#opentelemetry-integration","title":"OpenTelemetry Integration","text":"<p>Industry Trend: OpenTelemetry is becoming the standard for telemetry data.</p> <p>Built-in Hook: The enhanced debugger includes trace correlation: <pre><code>// Enable OpenTelemetry correlation\nimport { trace } from '@opentelemetry/api'\nimport { setOTelIntegration } from './lib/rdcp-debug.js'\n\nsetOTelIntegration({ trace })\n// Now all debug logs include traceId and spanId automatically\n</code></pre></p>"},{"location":"rdcp-implementation-guide/#cost-performance-budgets","title":"Cost &amp; Performance Budgets","text":"<p>Industry Trend: Organizations need cost control for observability data.</p> <p>Built-in Hook: Budget enforcement prevents runaway logging: <pre><code>// Already enforced in createEnhancedDebugger\nDEBUG_BUDGETS.maxLogsPerSecond = 50  // Adjust for your needs\n// Auto-warns when exceeded, can auto-disable in production\n</code></pre></p>"},{"location":"rdcp-implementation-guide/#ai-driven-anomaly-detection","title":"AI-Driven Anomaly Detection","text":"<p>Industry Trend: AI is becoming central to observability.</p> <p>Built-in Hook: Event emission for AI systems: <pre><code>// Connect your AI system\nimport { setAIEventHandler } from './lib/rdcp-debug.js'\n\nsetAIEventHandler((event, data) =&gt; {\n  aiSystem.analyze(event, data)\n  // AI can detect patterns and suggest debug enables\n})\n</code></pre></p>"},{"location":"rdcp-implementation-guide/#compliance-audit-trail","title":"Compliance &amp; Audit Trail","text":"<p>Industry Trend: GDPR, SOX compliance becoming mandatory.</p> <p>Built-in Hook: Audit logging for all debug changes: <pre><code>// Enable audit trail\nimport { setAuditLogger } from './lib/rdcp-debug.js'\n\nsetAuditLogger({\n  log: (entry) =&gt; {\n    // Store in compliance-approved system\n    complianceDB.insert(entry)\n  }\n})\n</code></pre></p>"},{"location":"rdcp-implementation-guide/#multi-tenancy-support-rdcp-standard","title":"Multi-Tenancy Support (RDCP Standard)","text":"<p>Industry Trend: Cloud-native applications need tenant isolation.</p> <p>RDCP Protocol Requirements:</p>"},{"location":"rdcp-implementation-guide/#standard-tenant-context-headers","title":"Standard Tenant Context Headers","text":"<p>RDCP defines standard headers for tenant context, agnostic of auth system: <pre><code>X-RDCP-Tenant-ID: org_2a1b3c4d\nX-RDCP-Isolation-Level: organization | namespace | process | global\nX-RDCP-Tenant-Name: Acme Corp (optional)\n</code></pre></p>"},{"location":"rdcp-implementation-guide/#protocol-level-tenant-handling","title":"Protocol-Level Tenant Handling","text":"<pre><code>// RDCP Standard: Extract tenant from standard headers\nfunction extractTenantContext(request) {\n  return {\n    tenantId: request.headers.get('x-rdcp-tenant-id') || 'default',\n    isolationLevel: request.headers.get('x-rdcp-isolation-level') || 'global',\n    tenantName: request.headers.get('x-rdcp-tenant-name')\n  }\n}\n\n// RDCP Standard: Tenant-scoped configuration\nconst TENANT_DEBUG_CONFIGS = new Map()\n\nfunction getTenantDebugConfig(tenantId) {\n  if (!TENANT_DEBUG_CONFIGS.has(tenantId)) {\n    TENANT_DEBUG_CONFIGS.set(tenantId, {\n      DATABASE: false,\n      API_ROUTES: false,\n      QUERIES: false,\n      REPORTS: false,\n      CACHE: false\n    })\n  }\n  return TENANT_DEBUG_CONFIGS.get(tenantId)\n}\n</code></pre>"},{"location":"rdcp-implementation-guide/#rdcp-standard-endpoint-response","title":"RDCP Standard Endpoint Response","text":"<p>All RDCP endpoints MUST include tenant context: <pre><code>// Standard RDCP response with tenant context\n{\n  \"protocol\": \"rdcp/1.0\",\n  \"tenant\": {\n    \"id\": \"extracted-tenant-id\",\n    \"isolationLevel\": \"organization\",\n    \"scope\": \"tenant-isolated\" | \"global\"\n  },\n  // ... rest of response\n}\n</code></pre></p>"},{"location":"rdcp-implementation-guide/#auth-system-integration-patterns","title":"Auth System Integration Patterns","text":"<p>Pattern 1: JWT-Based Systems: <pre><code>// Generic JWT integration\nfunction setTenantHeaders(request, jwtPayload) {\n  request.headers.set('x-rdcp-tenant-id', jwtPayload.org_id || jwtPayload.tenant_id)\n  request.headers.set('x-rdcp-isolation-level', 'organization')\n}\n</code></pre></p> <p>Pattern 2: Session-Based Systems: <pre><code>// Generic session integration\nfunction setTenantHeaders(request, session) {\n  request.headers.set('x-rdcp-tenant-id', session.organizationId)\n  request.headers.set('x-rdcp-isolation-level', 'organization')\n}\n</code></pre></p> <p>Pattern 3: API Key Systems: <pre><code>// Generic API key integration\nfunction setTenantHeaders(request, apiKeyMetadata) {\n  request.headers.set('x-rdcp-tenant-id', apiKeyMetadata.tenantId)\n  request.headers.set('x-rdcp-isolation-level', apiKeyMetadata.isolationLevel)\n}\n</code></pre></p>"},{"location":"rdcp-implementation-guide/#secflo-specific-multi-tenancy-implementation","title":"SecFlo-Specific Multi-Tenancy Implementation","text":"<p>Note: This section shows how SecFlo implements the RDCP standard using Clerk: <pre><code>// File: src/lib/secflo-rdcp-adapter.js\n// SecFlo's adapter to convert Clerk auth to RDCP standard headers\n\nimport { auth } from '@clerk/nextjs'\n\n// SecFlo: Convert Clerk context to RDCP standard headers\nexport function injectRDCPHeaders(request) {\n  const { orgId, organization } = auth()\n\n  // Set RDCP standard headers from Clerk data\n  request.headers.set('x-rdcp-tenant-id', orgId || 'default')\n  request.headers.set('x-rdcp-isolation-level', 'organization')\n  request.headers.set('x-rdcp-tenant-name', organization?.name || '')\n\n  return request\n}\n\n// File: src/app/rdcp/v1/discovery/route.js\n// SecFlo implementation using RDCP standard (Next.js App Router)\n\nimport { extractTenantContext, getTenantDebugConfig } from '@/lib/rdcp-debug'\nimport { injectRDCPHeaders } from '@/lib/secflo-rdcp-adapter'\nimport { createCategoryInfo } from '@/lib/rdcp-utils'\n\nexport async function GET(request) {\n  // SecFlo: Add Clerk org to standard RDCP headers\n  request = injectRDCPHeaders(request)\n\n  // RDCP Standard: Extract tenant from headers\n  const tenantContext = extractTenantContext(request)\n  const tenantConfig = getTenantDebugConfig(tenantContext.tenantId)\n\n  return Response.json({\n    \"protocol\": \"rdcp/1.0\",\n    \"tenant\": tenantContext,  // Standard RDCP tenant object\n    \"categories\": createCategoryInfo(tenantConfig),\n    // ... rest of response\n  })\n}\n</code></pre></p> <p>Tenant-Scoped Control: <pre><code>// File: api/debug/control/route.js\nexport const POST = withRDCPAuth(async function(request) {\n  const { orgId } = auth()\n  const tenantConfig = getTenantDebugConfig(orgId)\n  const body = await request.json()\n\n  // Apply changes to tenant-specific config\n  switch (body.action) {\n    case 'enable':\n      body.categories.forEach(cat =&gt; {\n        if (cat in tenantConfig) {\n          tenantConfig[cat] = true\n        }\n      })\n      break\n    // ... other actions\n  }\n\n  return Response.json({\n    \"protocol\": \"rdcp/1.0\",\n    \"tenant\": {\n      \"id\": orgId,\n      \"isolation\": \"organization\"\n    },\n    \"changes\": changes.map(change =&gt; ({\n      ...change,\n      \"tenantScope\": orgId,\n      \"isolationLevel\": \"organization\"\n    })),\n    // ... rest of response\n  })\n})\n</code></pre></p> <p>Admin Tool Multi-Tenant Discovery: <pre><code>// Admin tool can discover and manage multiple tenants\nGET /api/admin/tenants/discovery\n{\n  \"tenants\": [\n    {\n      \"id\": \"org_2a1b3c4d\",\n      \"name\": \"Acme Corp\",\n      \"rdcpEndpoint\": \"https://secflo.app/api/debug/\",\n      \"debugStatus\": { \n        \"DATABASE\": true, \n        \"API_ROUTES\": false \n      },\n      \"metrics\": {\n        \"logsPerSecond\": 2.3,\n        \"activeSince\": \"2025-09-17T10:30:00Z\"\n      }\n    },\n    {\n      \"id\": \"org_5e6f7g8h\",\n      \"name\": \"TechCorp\",\n      \"rdcpEndpoint\": \"https://secflo.app/api/debug/\",\n      \"debugStatus\": { \n        \"QUERIES\": true \n      }\n    }\n  ]\n}\n</code></pre></p> <p>Benefits for SecFlo: - Each organization's debug settings are completely isolated - No cross-tenant debug data leakage - Integrates seamlessly with existing Clerk auth - Admin tool can manage debug across all customer organizations - Debug output automatically includes tenant context for filtering</p>"},{"location":"rdcp-implementation-guide/#rdcp-tenant-isolation-levels-protocol-standard","title":"RDCP Tenant Isolation Levels (Protocol Standard)","text":"<p>The RDCP protocol defines four standard isolation levels:</p> Level Description Use Case <code>global</code> No tenant isolation, shared configuration Single-tenant applications <code>process</code> Process-level isolation Container-based multi-tenancy <code>namespace</code> Namespace isolation (k8s) Cloud-native applications <code>organization</code> Full organizational isolation SaaS multi-tenant applications <p>Audit Trail Requirements: When <code>isolationLevel</code> is not <code>global</code>, all control operations MUST include: <pre><code>{\n  \"audit\": {\n    \"tenantId\": \"org_123\",\n    \"operator\": \"user@example.com\",\n    \"timestamp\": \"2025-09-17T10:30:00Z\",\n    \"action\": \"enable\",\n    \"justification\": \"Investigating issue #1234\",\n    \"isolationLevel\": \"organization\"\n  }\n}\n</code></pre></p> <p>This separation ensures: - RDCP protocol remains auth-agnostic - Clear abstraction between protocol and implementation - Standard headers enable tool interoperability - SecFlo can use Clerk while others use different auth systems</p>"},{"location":"rdcp-implementation-guide/#server-capabilities-rate-limiting-and-audit","title":"Server capabilities: rate limiting and audit","text":"<p>The server supports optional rate limiting and persistent audit with configurable behavior.</p> <ul> <li>Rate limiting</li> <li>Configuration supports defaultRule, perEndpoint, perTenant</li> <li>Standard headers (draft-7) are emitted when enabled; Retry-After is added on limited responses</li> <li>Audit</li> <li>Sink options: console | file | none (file supports rotation/retention)</li> <li>sampleRate: number (0.0\u20131.0)</li> <li>redact: (record) =&gt; record (optional redaction)</li> <li>failureMode: 'ignore' | 'warn' | 'fail'<ul> <li>ignore (default): do nothing on write failure</li> <li>warn: adapters add Warning: 199 rdcp \"audit-write-failed\"</li> <li>fail: returns RDCP_AUDIT_WRITE_FAILED (500) with details</li> </ul> </li> </ul> <p>Example (Express adapter): <pre><code>adapters.express.createRDCPMiddleware({\n  authenticator: auth.validateRDCPAuth,\n  capabilities: {\n    rateLimit: {\n      enabled: true,\n      headers: true,\n      headersMode: 'draft-7',\n      defaultRule: { windowMs: 60000, maxRequests: 120 },\n      perEndpoint: { control: { windowMs: 10000, maxRequests: 10 } },\n    },\n    audit: {\n      enabled: true,\n      sink: 'file',\n      sampleRate: 0.25,\n      failureMode: 'warn',\n      file: { path: 'rdcp-audit.log', maxBytes: 5*1024*1024, maxFiles: 5 }\n    }\n  }\n})\n</code></pre></p>"},{"location":"rdcp-implementation-guide/#ebpf-readiness","title":"eBPF Readiness","text":"<p>Emerging Trend: Kernel-level observability becoming crucial.</p> <p>Built-in Hook: Capability flags for future eBPF integration: <pre><code>\"capabilities\": {\n  \"kernelLevelInstrumentation\": false,  // Ready when eBPF available\n  \"systemCallTracing\": false\n}\n</code></pre></p> <p>Why These Matter Now: Adding these hooks later would require protocol version changes and breaking compatibility. Including them dormant in v1.0 ensures smooth evolution as these technologies mature.</p>"},{"location":"rdcp-implementation-guide/#known-limitations-future-enhancements","title":"\ud83d\udd0d Known Limitations &amp; Future Enhancements","text":""},{"location":"rdcp-implementation-guide/#performance-metrics","title":"Performance Metrics","text":"<p>The current implementation uses placeholder values for CPU and memory impact (\"0.1%\", \"1MB\"). These provide a working baseline but should be enhanced with actual monitoring in production environments.</p> <p>Enhancement path: Integrate with Node.js <code>perf_hooks</code> API or system monitoring tools like <code>process.cpuUsage()</code> and <code>process.memoryUsage()</code> to provide real metrics:</p> <pre><code>// Future enhancement example\nimport { performance } from 'perf_hooks'\n\nfunction getRealMetrics() {\n  const cpuUsage = process.cpuUsage()\n  const memUsage = process.memoryUsage()\n  return {\n    cpu: `${(cpuUsage.user / 1000000).toFixed(2)}%`,\n    memory: `${(memUsage.heapUsed / 1024 / 1024).toFixed(1)}MB`,\n    actualMeasurement: true\n  }\n}\n</code></pre>"},{"location":"rdcp-implementation-guide/#category-call-tracking","title":"Category Call Tracking","text":"<p>Debug call counts per category are tracked in <code>metrics.categoryStats</code> but not yet fully exposed through the status endpoint. The infrastructure exists but requires integration with the performance monitoring system.</p> <p>Enhancement path: Connect category statistics to the status endpoint for detailed usage analysis:</p> <pre><code>// Future enhancement for status endpoint\nObject.keys(status).forEach(category =&gt; {\n  if (status[category]) {\n    categories[category] = {\n      enabled: true,\n      activeCallCount: metrics.categoryStats[category] || 0,\n      callsInLastMinute: calculateRecentCalls(category),\n      totalCallsToday: metrics.categoryStats[category] || 0,\n      lastActivity: getLastActivityTime(category),\n      averageLatency: calculateAverageLatency(category)\n    }\n  }\n})\n</code></pre>"},{"location":"rdcp-implementation-guide/#temporary-controls","title":"Temporary Controls","text":"<p>The protocol supports temporary debug enables with automatic timeouts, but this implementation uses permanent toggles only. Temporary controls would add production safety by automatically disabling debug output after a specified duration.</p> <p>Enhancement path: Add timeout functionality with automatic category disable:</p> <pre><code>// Future enhancement for temporary controls\nconst temporaryEnables = new Map()\n\nexport function enableTemporary(category, duration) {\n  DEBUG_CONFIG[category] = true\n\n  // Clear any existing timeout\n  if (temporaryEnables.has(category)) {\n    clearTimeout(temporaryEnables.get(category))\n  }\n\n  // Set new timeout\n  const timeoutId = setTimeout(() =&gt; {\n    DEBUG_CONFIG[category] = false\n    temporaryEnables.delete(category)\n    console.log(`\u23f0 Auto-disabled debug category: ${category}`)\n  }, duration * 1000)\n\n  temporaryEnables.set(category, timeoutId)\n}\n</code></pre>"},{"location":"rdcp-implementation-guide/#rate-limiting","title":"Rate Limiting","text":"<p>The current implementation doesn't include rate limiting for debug output, which could overwhelm logs in high-traffic scenarios.</p> <p>Enhancement path: Implement rate limiting per category to prevent log flooding while maintaining visibility.</p>"},{"location":"rdcp-implementation-guide/#persistence","title":"Persistence","text":"<p>Debug configuration resets on application restart. Production environments might benefit from optional persistence.</p> <p>Enhancement path: Add optional configuration persistence using environment variables or a configuration file.</p>"},{"location":"rdcp-implementation-guide/#multi-instance-coordination","title":"Multi-Instance Coordination","text":"<p>In clustered deployments, each instance maintains its own debug configuration. There's no coordination between instances.</p> <p>Enhancement path: Use Redis or similar for shared configuration state across instances.</p> <p>Note: These limitations don't prevent successful RDCP implementation. They represent areas where production deployments might enhance the basic implementation based on actual requirements. The mechanical implementation provides a solid foundation that can be extended as needed.</p>"},{"location":"rdcp-implementation-guide/#troubleshooting-common-issues","title":"\ud83d\udd27 Troubleshooting Common Issues","text":""},{"location":"rdcp-implementation-guide/#port-conflicts","title":"Port Conflicts","text":"<pre><code># Find process using port 3000\nlsof -ti:3000\n# Kill the process\nkill -9 $(lsof -ti:3000)\n</code></pre>"},{"location":"rdcp-implementation-guide/#cors-issues-for-browser-based-admin-tools","title":"CORS Issues (for browser-based admin tools)","text":"<pre><code>// Express.js CORS middleware for development\napp.use((req, res, next) =&gt; {\n  res.header('Access-Control-Allow-Origin', '*')\n  res.header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')\n  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-API-Key')\n  if (req.method === 'OPTIONS') {\n    res.sendStatus(200)\n  } else {\n    next()\n  }\n})\n</code></pre>"},{"location":"rdcp-implementation-guide/#environment-variable-issues","title":"Environment Variable Issues","text":"<pre><code># Create .env file with required variables\necho \"RDCP_API_KEY=your-32-character-or-longer-key-here\" &gt; .env\necho \"NODE_ENV=development\" &gt;&gt; .env\n</code></pre>"},{"location":"rdcp-implementation-guide/#docker-deployment","title":"Docker Deployment","text":"<pre><code># Dockerfile example\nFROM node:18-alpine\nWORKDIR /app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\n\n# Environment variables for RDCP\n# RDCP_API_KEY must be set at runtime via -e flag or .env file\n# Must be 32+ characters for security\nENV NODE_ENV=production\nENV PORT=3000\n\nEXPOSE 3000\nCMD [\"npm\", \"start\"]\n</code></pre> <pre><code># Run container with API key\ndocker run -e RDCP_API_KEY=\"your-32-character-or-longer-secure-key-here\" -p 3000:3000 your-app\n</code></pre>"},{"location":"rdcp-implementation-guide/#debug-output-not-appearing","title":"Debug Output Not Appearing","text":"<pre><code>// Verify debug configuration is mutable\nconsole.log('DEBUG_CONFIG before:', DEBUG_CONFIG)\nDEBUG_CONFIG.DATABASE = true\nconsole.log('DEBUG_CONFIG after:', DEBUG_CONFIG)\ndebug.database('Test message') // Should appear\n</code></pre>"},{"location":"rdcp-implementation-guide/#request-validation-schemas","title":"\ud83d\udccb Request Validation Schemas","text":"<pre><code>// File: lib/rdcp-validation.js\n\nimport { DEBUG_CONFIG } from './rdcp-debug.js'\n\nconst controlRequestSchema = {\n  type: 'object',\n  required: ['action', 'categories'],\n  properties: {\n    action: { \n      enum: ['enable', 'disable', 'toggle', 'enable-all', 'disable-all', 'reset'] \n    },\n    categories: { \n      oneOf: [\n        { type: 'array', items: { type: 'string' } },\n        { type: 'string' }\n      ]\n    },\n    requestId: { type: 'string' },\n    options: {\n      type: 'object',\n      properties: {\n        temporary: { type: 'boolean' },\n        duration: { type: 'number' },\n        reason: { type: 'string' }\n      }\n    }\n  },\n  additionalProperties: false\n}\n\nexport function validateControlRequest(data) {\n  // Basic validation implementation\n  if (!data.action || !data.categories) {\n    return { valid: false, error: 'Missing required fields: action, categories' }\n  }\n\n  const validActions = ['enable', 'disable', 'toggle', 'enable-all', 'disable-all', 'reset']\n  if (!validActions.includes(data.action)) {\n    return { valid: false, error: `Invalid action. Must be one of: ${validActions.join(', ')}` }\n  }\n\n  // Check for non-existent categories (if not bulk action)\n  if (!['enable-all', 'disable-all', 'reset'].includes(data.action)) {\n    const categories = Array.isArray(data.categories) ? data.categories : [data.categories]\n    const validCategories = Object.keys(DEBUG_CONFIG)\n    const invalidCategories = categories.filter(cat =&gt; !validCategories.includes(cat))\n\n    if (invalidCategories.length &gt; 0) {\n      return { \n        valid: false, \n        error: `Invalid categories: ${invalidCategories.join(', ')}. Valid categories: ${validCategories.join(', ')}` \n      }\n    }\n  }\n\n  return { valid: true }\n}\n</code></pre>"},{"location":"rdcp-implementation-guide/#integration-with-existing-logging-systems","title":"\ud83d\udd17 Integration with Existing Logging Systems","text":""},{"location":"rdcp-implementation-guide/#winston-logger-integration","title":"Winston Logger Integration","text":"<pre><code>// File: lib/rdcp-winston-bridge.js\nimport winston from 'winston'\n\nconst logger = winston.createLogger({\n  level: 'info',\n  transports: [new winston.transports.Console()]\n})\n\n// Bridge RDCP debug to Winston\nexport const debug = {\n  database: createTrackedDebugger('DATABASE', (message, ...args) =&gt; \n    logger.debug(`\ud83d\udd0c [DB] ${message}`, ...args)\n  ),\n  api: createTrackedDebugger('API_ROUTES', (message, ...args) =&gt; \n    logger.debug(`\ud83d\udd0d [API] ${message}`, ...args)\n  )\n  // ... other categories\n}\n</code></pre>"},{"location":"rdcp-implementation-guide/#pino-logger-integration","title":"Pino Logger Integration","text":"<pre><code>// File: lib/rdcp-pino-bridge.js\nimport pino from 'pino'\n\nconst logger = pino()\n\nexport const debug = {\n  database: createTrackedDebugger('DATABASE', (message, ...args) =&gt; \n    logger.debug({ category: 'DATABASE', emoji: '\ud83d\udd0c' }, message, ...args)\n  )\n  // ... other categories\n}\n</code></pre>"},{"location":"rdcp-implementation-guide/#common-pitfalls","title":"\u26a0\ufe0f Common Pitfalls","text":"<ol> <li>Don't overthink categories - Start with your existing debug areas</li> <li>Don't optimize performance tracking initially - Get basic metrics first</li> <li>Don't build complex authentication - API key is sufficient to start</li> <li>Don't create elaborate schemas - Follow the examples exactly</li> <li>Don't add features not in spec - Stick to the standard</li> <li>Remember API key length - Must be 32+ characters for security</li> <li>Test error cases - Verify authentication and validation work</li> <li>Check CORS - Add headers if building browser-based admin tools</li> </ol> <p>Implementation Time: 30 minutes for basic compliance Enhancement Time: Infinite, based on real needs Goal: RDCP-compliant application that can be controlled at runtime  </p> <p>This guide should require zero design decisions - just mechanical implementation of the RDCP standard.</p>"},{"location":"rdcp-protocol-specification/","title":"Runtime Debug Control Protocol (RDCP) Specification v1.0","text":"<p>Status: Draft Date: 2025-09-17 Purpose: Formal protocol specification for runtime debug control across distributed systems</p>"},{"location":"rdcp-protocol-specification/#abstract","title":"Abstract","text":"<p>The Runtime Debug Control Protocol (RDCP) is an HTTP-based protocol that enables dynamic control of debug logging in distributed systems without requiring application restarts or redeployment. RDCP provides standardized endpoints for discovering debug categories, enabling or disabling logging at runtime, monitoring system health, and tracking configuration changes through an audit trail. The protocol supports multiple security levels ranging from basic API key authentication for development environments to enterprise-grade mutual TLS for regulated industries. Multi-tenancy capabilities allow isolated configuration management across organizational boundaries. This specification defines the protocol architecture, message formats, authentication mechanisms, error handling, and compliance requirements for interoperable implementations across programming languages and platforms.</p>"},{"location":"rdcp-protocol-specification/#1-protocol-overview","title":"1. Protocol Overview","text":""},{"location":"rdcp-protocol-specification/#11-scope","title":"1.1 Scope","text":"<p>RDCP defines a standardized HTTP-based protocol for controlling debug logging in distributed applications at runtime. This specification is language and framework agnostic.</p>"},{"location":"rdcp-protocol-specification/#12-conformance-requirements","title":"1.2 Conformance Requirements","text":"<p>The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119.</p>"},{"location":"rdcp-protocol-specification/#13-terminology","title":"1.3 Terminology","text":"<ul> <li>Debug Category: A named collection of debug instrumentation points that can be collectively enabled or disabled.</li> <li>Tenant: An isolated configuration context, typically representing an organization or customer in a multi-tenant system.</li> <li>Temporary Control: A time-limited debug configuration that automatically expires after a specified duration.</li> <li>Security Level: A tier of authentication and authorization requirements (basic, standard, or enterprise).</li> </ul>"},{"location":"rdcp-protocol-specification/#2-protocol-architecture","title":"2. Protocol Architecture","text":""},{"location":"rdcp-protocol-specification/#21-transport","title":"2.1 Transport","text":"<ul> <li>Protocol: HTTP/1.1 or HTTP/2</li> <li>Content-Type: application/json</li> <li>Character Encoding: UTF-8</li> </ul>"},{"location":"rdcp-protocol-specification/#22-required-endpoints","title":"2.2 Required Endpoints","text":"<p>Compliant implementations MUST expose these endpoints:</p> Endpoint Method Purpose <code>/.well-known/rdcp</code> GET Protocol discovery <code>/rdcp/v1/discovery</code> GET Debug system discovery <code>/rdcp/v1/control</code> POST Runtime control <code>/rdcp/v1/status</code> GET Current status <code>/rdcp/v1/health</code> GET System health"},{"location":"rdcp-protocol-specification/#23-optional-endpoints","title":"2.3 Optional Endpoints","text":"<p>Implementations MAY expose:</p> Endpoint Method Purpose <code>/rdcp/v1/metrics</code> GET Performance metrics <code>/rdcp/v1/tenants</code> GET Multi-tenant discovery <code>/rdcp/v1/audit</code> GET Audit trail"},{"location":"rdcp-protocol-specification/#3-authentication-authorization","title":"3. Authentication &amp; Authorization","text":""},{"location":"rdcp-protocol-specification/#31-security-levels","title":"3.1 Security Levels","text":"<p>Implementations MUST declare their security level and support appropriate methods:</p> Level Use Case Required Methods Features <code>basic</code> Development/Internal API Key Simple shared secrets <code>standard</code> Production SaaS Bearer Token (JWT/OAuth2) User identity, expiration <code>enterprise</code> Regulated Industries mTLS + Token Certificate validation, full audit"},{"location":"rdcp-protocol-specification/#32-authentication-headers","title":"3.2 Authentication Headers","text":""},{"location":"rdcp-protocol-specification/#required-headers-all-levels","title":"Required Headers (All Levels)","text":"<pre><code>X-RDCP-Auth-Method: api-key | bearer | mtls | hybrid\nX-RDCP-Client-ID: &lt;client-identifier&gt;\nX-RDCP-Request-ID: &lt;unique-request-id&gt;  # For audit trail\n</code></pre>"},{"location":"rdcp-protocol-specification/#method-specific-headers","title":"Method-Specific Headers","text":"<p>Basic (API Key): <pre><code>X-RDCP-API-Key: rdcp_[env]_[type]_[random]\nX-RDCP-Key-Version: v1  # For key rotation\n</code></pre></p> <p>Standard (Bearer Token): <pre><code>Authorization: Bearer &lt;jwt-token&gt;\nX-RDCP-Token-Type: jwt | oauth2 | custom\n</code></pre></p> <p>Enterprise (mTLS): <pre><code>X-Client-Cert: &lt;certificate-fingerprint&gt;\nX-RDCP-Cert-Subject: CN=client.example.com\n</code></pre></p>"},{"location":"rdcp-protocol-specification/#33-scopes-and-permissions","title":"3.3 Scopes and Permissions","text":"<p>Implementations MUST support standard scopes:</p> Scope Operations Description <code>discovery</code> GET endpoints Read system information <code>status</code> Status/Health Monitor system state <code>control</code> POST control Modify debug settings <code>admin</code> All operations Full access + audit trail"},{"location":"rdcp-protocol-specification/#34-authentication-response","title":"3.4 Authentication Response","text":""},{"location":"rdcp-protocol-specification/#success-context","title":"Success Context","text":"<p>Auth validation MUST provide: <pre><code>{\n  \"authenticated\": true,\n  \"method\": \"bearer\",\n  \"userId\": \"user@example.com\",\n  \"tenantId\": \"org_123\",\n  \"scopes\": [\"discovery\", \"status\", \"control\"],\n  \"sessionId\": \"sess_abc123\",\n  \"expiresAt\": \"2025-09-17T12:00:00Z\"  # If applicable\n}\n</code></pre></p>"},{"location":"rdcp-protocol-specification/#failure-response","title":"Failure Response","text":"<pre><code>{\n  \"error\": {\n    \"code\": \"RDCP_AUTH_FAILED\",\n    \"message\": \"Authentication failed\",\n    \"method\": \"bearer\",\n    \"details\": {\n      \"reason\": \"token_expired\" | \"invalid_key\" | \"insufficient_scopes\",\n      \"requiredScopes\": [\"control\"],\n      \"providedScopes\": [\"status\"]\n    },\n    \"protocol\": \"rdcp/1.0\"\n  }\n}\n</code></pre> <p>Status Codes: - <code>401 Unauthorized</code>: No valid credentials - <code>403 Forbidden</code>: Valid credentials, insufficient permissions</p>"},{"location":"rdcp-protocol-specification/#35-key-rotation-and-management","title":"3.5 Key Rotation and Management","text":"<p>API Keys: - MUST support multiple active keys - SHOULD include version in key format - MUST allow gradual key rotation</p> <p>Tokens: - MUST validate expiration - SHOULD support refresh tokens - MUST validate issuer and audience</p>"},{"location":"rdcp-protocol-specification/#36-auth-validation-interface","title":"3.6 Auth Validation Interface","text":"<p>Implementations MUST provide consistent auth validation regardless of method:</p> <pre><code>// Pseudo-code interface (language agnostic)\ninterface AuthValidationResult {\n  valid: boolean\n  method: \"api-key\" | \"bearer\" | \"mtls\" | \"hybrid\"\n  userId?: string           // Required for standard/enterprise\n  tenantId?: string         // Required if multi-tenant\n  scopes: string[]          // Granted permissions\n  sessionId?: string        // For audit correlation\n  expiresAt?: timestamp     // For time-limited access\n  metadata?: {              // Additional context\n    clientId: string\n    clientVersion: string\n    ipAddress: string\n  }\n}\n</code></pre>"},{"location":"rdcp-protocol-specification/#37-auth-method-selection","title":"3.7 Auth Method Selection","text":"<p>Clients SHOULD select auth method based on deployment:</p> <pre><code>// Client discovers server capabilities\nGET /.well-known/rdcp\n\n// Client selects appropriate method\nif (environment === \"development\") {\n  use \"api-key\" with X-RDCP-API-Key header\n} else if (environment === \"production\") {\n  use \"bearer\" with Authorization header\n} else if (environment === \"regulated\") {\n  use \"mtls\" with client certificates\n}\n</code></pre>"},{"location":"rdcp-protocol-specification/#38-audit-requirements","title":"3.8 Audit Requirements","text":"<p>Based on security level:</p> Level Audit Requirements <code>basic</code> Optional logging <code>standard</code> User identity + actions <code>enterprise</code> Full audit trail with compliance metadata"},{"location":"rdcp-protocol-specification/#4-multi-tenancy","title":"4. Multi-Tenancy","text":""},{"location":"rdcp-protocol-specification/#41-tenant-context-headers","title":"4.1 Tenant Context Headers","text":"<p>When multi-tenancy is supported, implementations MUST accept:</p> <pre><code>X-RDCP-Tenant-ID: &lt;tenant-identifier&gt;\nX-RDCP-Isolation-Level: global|process|namespace|organization\nX-RDCP-Tenant-Name: &lt;human-readable-name&gt;  # OPTIONAL\n</code></pre>"},{"location":"rdcp-protocol-specification/#42-isolation-levels","title":"4.2 Isolation Levels","text":"Level Description Scope <code>global</code> No isolation All tenants share configuration <code>process</code> Process isolation Configuration per process <code>namespace</code> Namespace isolation Configuration per namespace <code>organization</code> Full isolation Complete tenant separation"},{"location":"rdcp-protocol-specification/#43-tenant-context-in-responses","title":"4.3 Tenant Context in Responses","text":"<p>All responses in multi-tenant mode MUST include:</p> <pre><code>{\n  \"protocol\": \"rdcp/1.0\",\n  \"tenant\": {\n    \"id\": \"&lt;tenant-id&gt;\",\n    \"isolationLevel\": \"&lt;level&gt;\",\n    \"scope\": \"global|tenant-isolated\"\n  }\n}\n</code></pre>"},{"location":"rdcp-protocol-specification/#5-endpoint-specifications","title":"5. Endpoint Specifications","text":""},{"location":"rdcp-protocol-specification/#51-protocol-discovery","title":"5.1 Protocol Discovery","text":"<p>Request: <pre><code>GET /.well-known/rdcp HTTP/1.1\n</code></pre></p> <p>Response: <pre><code>{\n  \"protocol\": \"rdcp/1.0\",\n  \"endpoints\": {\n    \"discovery\": \"/rdcp/v1/discovery\",\n    \"control\": \"/rdcp/v1/control\",\n    \"status\": \"/rdcp/v1/status\",\n    \"health\": \"/rdcp/v1/health\"\n  },\n  \"capabilities\": {\n    \"multiTenancy\": true|false,\n    \"performanceMetrics\": true|false,\n    \"temporaryControls\": true|false,\n    \"auditTrail\": true|false\n  },\n  \"security\": {\n    \"level\": \"basic\" | \"standard\" | \"enterprise\",\n    \"methods\": [\"api-key\", \"bearer\", \"mtls\"],\n    \"scopes\": [\"discovery\", \"status\", \"control\", \"admin\"],\n    \"required\": true|false,\n    \"keyRotation\": true|false,\n    \"tokenRefresh\": true|false\n  }\n}\n</code></pre></p>"},{"location":"rdcp-protocol-specification/#52-debug-system-discovery","title":"5.2 Debug System Discovery","text":"<p>Request: <pre><code>GET /rdcp/v1/discovery HTTP/1.1\nX-RDCP-Tenant-ID: &lt;tenant-id&gt;  # If multi-tenant\n</code></pre></p> <p>Response: <pre><code>{\n  \"protocol\": \"rdcp/1.0\",\n  \"timestamp\": \"2025-09-17T10:30:00Z\",\n  \"categories\": [\n    {\n      \"name\": \"DATABASE\",\n      \"description\": \"Database operations\",\n      \"enabled\": true,\n      \"temporary\": false,\n      \"metrics\": {\n        \"callsTotal\": 1234,\n        \"callsPerSecond\": 2.3\n      }\n    }\n  ],\n  \"performance\": {\n    \"totalCalls\": 45678,\n    \"callsPerSecond\": 2.3,\n    \"categoryBreakdown\": { \"DATABASE\": 1234 }\n  }\n}\n</code></pre></p>"},{"location":"rdcp-protocol-specification/#53-runtime-control","title":"5.3 Runtime Control","text":"<p>Request: <pre><code>POST /rdcp/v1/control HTTP/1.1\nContent-Type: application/json\n\n{\n  \"action\": \"enable|disable|toggle|reset|status\",\n  \"categories\": [\"DATABASE\", \"API_ROUTES\"]  // or a single string \"DATABASE\"\n  ,\n  \"options\": {\n    \"temporary\": true,\n    \"duration\": \"15m\",  // number (seconds) or duration string (e.g., \"15m\")\n    \"reason\": \"Investigating issue #1234\"\n  }\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"protocol\": \"rdcp/1.0\",\n  \"timestamp\": \"2025-09-17T10:30:00Z\",\n  \"action\": \"enable\",\n  \"categories\": [\"DATABASE\"],\n  \"status\": \"success\", // \"partial\" or \"failed\"\n  \"message\": \"Enabled categories\",\n  \"changes\": [\n    {\n      \"category\": \"DATABASE\",\n      \"previousState\": false,\n      \"newState\": true,\n      \"temporary\": true,\n      \"effectiveAt\": \"2025-09-17T10:30:00Z\",\n      \"expiresAt\": \"2025-09-17T10:45:00Z\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"rdcp-protocol-specification/#54-status-monitoring","title":"5.4 Status Monitoring","text":"<p>Request: <pre><code>GET /rdcp/v1/status HTTP/1.1\n</code></pre></p> <p>Response: <pre><code>{\n  \"protocol\": \"rdcp/1.0\",\n  \"timestamp\": \"2025-09-17T10:30:00Z\",\n  \"enabled\": true,\n  \"categories\": { \"DATABASE\": true, \"API_ROUTES\": false },\n  \"performance\": { \"totalCalls\": 45678, \"callsPerSecond\": 2.3 }\n}\n</code></pre></p>"},{"location":"rdcp-protocol-specification/#55-health-check","title":"5.5 Health Check","text":"<p>Request: <pre><code>GET /rdcp/v1/health HTTP/1.1\n</code></pre></p> <p>Response: <pre><code>{\n  \"protocol\": \"rdcp/1.0\",\n  \"timestamp\": \"2025-09-17T10:30:00Z\",\n  \"status\": \"healthy\",\n  \"checks\": [\n    { \"name\": \"redis\", \"status\": \"pass\", \"duration\": \"5ms\" },\n    { \"name\": \"db\", \"status\": \"pass\", \"duration\": \"8ms\" }\n  ]\n}\n</code></pre></p>"},{"location":"rdcp-protocol-specification/#6-error-handling","title":"6. Error Handling","text":""},{"location":"rdcp-protocol-specification/#61-standard-error-format","title":"6.1 Standard Error Format","text":"<p>All errors MUST follow:</p> <pre><code>{\n  \"error\": {\n    \"code\": \"RDCP_ERROR_CODE\",\n    \"message\": \"Human-readable message\",\n    \"details\": {},  # OPTIONAL\n    \"protocol\": \"rdcp/1.0\"\n  }\n}\n</code></pre>"},{"location":"rdcp-protocol-specification/#62-standard-error-codes","title":"6.2 Standard Error Codes","text":"<p>For the complete, source-of-truth list of protocol error codes and their HTTP mappings, see: docs/error-codes.md</p>"},{"location":"rdcp-protocol-specification/#7-performance-metrics","title":"7. Performance Metrics","text":""},{"location":"rdcp-protocol-specification/#71-metric-representation","title":"7.1 Metric Representation","text":"<p>When reporting metrics, implementations MUST use:</p> <pre><code>{\n  \"value\": &lt;numeric-value&gt;,\n  \"unit\": \"&lt;unit-string&gt;\",\n  \"measured\": true|false,  # false indicates placeholder\n  \"timestamp\": \"2025-09-17T10:30:00Z\"\n}\n</code></pre>"},{"location":"rdcp-protocol-specification/#72-standard-units","title":"7.2 Standard Units","text":"Metric Unit Example CPU Usage <code>percent</code> 0.1 Memory <code>bytes</code> 1048576 Rate <code>per_second</code> 2.3 Count <code>count</code> 1234 Duration <code>milliseconds</code> 50"},{"location":"rdcp-protocol-specification/#73-placeholder-values","title":"7.3 Placeholder Values","text":"<p>When actual metrics are unavailable: - Set <code>\"measured\": false</code> - Provide reasonable estimates - Document in response that values are estimated</p>"},{"location":"rdcp-protocol-specification/#8-security-considerations","title":"8. Security Considerations","text":""},{"location":"rdcp-protocol-specification/#81-threat-model","title":"8.1 Threat Model","text":"<p>RDCP controls application behavior and may expose sensitive diagnostic information. The following threats are considered:</p> <p>In Scope: - Unauthorized access to debug controls - Information disclosure through debug output - Denial of service through resource exhaustion - Privilege escalation through scope manipulation - Replay attacks using captured credentials - Audit trail tampering</p> <p>Out of Scope: - Protection of debug output after it leaves the application - Network-level attacks (assumed TLS/mTLS provides transport security) - Host-level compromise (operating system security)</p>"},{"location":"rdcp-protocol-specification/#82-authentication-security","title":"8.2 Authentication Security","text":"<p>Credential Strength:  API keys MUST be cryptographically random with minimum entropy of 128 bits - Keys MUST be compared using constant-time comparison to prevent timing attacks - Bearer tokens MUST use industry-standard formats (JWT with HS256/RS256, OAuth2) - Token validation MUST verify signature, issuer, audience, and expiration</p> <p>Credential Storage: - Servers MUST NOT log credentials in plaintext - Clients SHOULD store credentials in secure storage (keychains, vaults) - API keys SHOULD be rotatable without service interruption</p>"},{"location":"rdcp-protocol-specification/#83-authorization-and-scopes","title":"8.3 Authorization and Scopes","text":"<p>Principle of Least Privilege: - Clients SHOULD request minimum necessary scopes - Servers MUST validate scopes for each operation - Control operations MUST require explicit \"control\" scope - Status/discovery MAY use broader \"discovery\" scope</p> <p>Scope Validation: - Servers MUST reject operations when required scopes are absent - Scope elevation MUST NOT be possible through protocol manipulation - Multi-tenant systems MUST enforce tenant isolation in scope validation</p>"},{"location":"rdcp-protocol-specification/#84-transport-security","title":"8.4 Transport Security","text":"<p>TLS Requirements: - Production deployments MUST use TLS; TLS 1.3 is RECOMMENDED - TLS 1.2 MAY be used only where TLS 1.3 is unavailable - Development MAY use HTTP only on localhost (127.0.0.1/::1) - Servers SHOULD use HSTS headers to enforce HTTPS</p> <p>Certificate Validation: - Clients MUST validate server certificates - mTLS deployments MUST validate client certificates - Certificate pinning MAY be used for enhanced security - Self-signed certificates MUST NOT be used in production</p>"},{"location":"rdcp-protocol-specification/#85-denial-of-service-protection","title":"8.5 Denial of Service Protection","text":"<p>Rate Limiting: - Control endpoints SHOULD limit requests to 60/minute per client - Status endpoints MAY allow higher rates (e.g., 600/minute) - Rate limits SHOULD be enforced per authenticated identity - 429 Too Many Requests response MUST include Retry-After header</p> <p>Resource Exhaustion: - Temporary controls MUST have maximum duration limits (24 hours RECOMMENDED) - Server SHOULD limit concurrent temporary controls per tenant - Discovery responses SHOULD limit category list size - Request timeouts SHOULD be enforced (30 seconds RECOMMENDED)</p>"},{"location":"rdcp-protocol-specification/#86-replay-attack-prevention","title":"8.6 Replay Attack Prevention","text":"<p>Request Uniqueness: - Clients SHOULD include unique X-RDCP-Request-ID header - Servers MAY implement request deduplication (5-minute window RECOMMENDED) - Timestamp validation SHOULD reject requests with clock skew &gt;5 minutes - Nonces MAY be required for high-security deployments</p>"},{"location":"rdcp-protocol-specification/#87-audit-trail-security","title":"8.7 Audit Trail Security","text":"<p>Tamper Evidence: - Audit logs SHOULD use append-only storage - Enterprise deployments SHOULD use cryptographic hashing (e.g., SHA-256) - Log entries SHOULD include previous entry hash for chain validation - External audit systems MAY be used for compliance requirements</p> <p>Audit Content: - Logs MUST include timestamp, authenticated identity, action, affected categories - Logs SHOULD include client IP address and user agent - Logs MUST NOT include credentials or sensitive payload data - Retention policies SHOULD align with compliance requirements (90 days minimum)</p>"},{"location":"rdcp-protocol-specification/#88-privacy-considerations","title":"8.8 Privacy Considerations","text":"<p>Personal Information: - User identifiers in audit logs constitute PII under GDPR/CCPA - Implementations SHOULD provide audit log anonymization options - Debug output MAY contain sensitive data; access controls are essential - Multi-tenant systems MUST prevent cross-tenant information leakage</p> <p>Data Minimization: - Status endpoints SHOULD NOT expose internal system details unnecessarily - Error messages SHOULD NOT leak implementation details - Discovery responses SHOULD provide only essential category information</p>"},{"location":"rdcp-protocol-specification/#89-multi-tenancy-security","title":"8.9 Multi-Tenancy Security","text":"<p>Tenant Isolation: - Tenant ID MUST be validated against authenticated identity - Cross-tenant operations MUST be explicitly denied - Tenant isolation MUST be enforced at the storage layer - Global operations (admin) MUST require elevated privileges</p> <p>Tenant Context Injection: - Servers MUST validate tenant headers match authentication context - Clients MUST NOT be able to impersonate other tenants - Tenant switching MUST require re-authentication</p>"},{"location":"rdcp-protocol-specification/#9-iana-considerations","title":"9. IANA Considerations","text":""},{"location":"rdcp-protocol-specification/#91-well-known-uri-registration","title":"9.1 Well-Known URI Registration","text":"<p>This document registers the following well-known URI in the \"Well-Known URIs\" registry as defined by RFC 8615:</p> <ul> <li>URI suffix: rdcp</li> <li>Change controller: IETF</li> <li>Specification document: This document</li> <li>Status: permanent</li> <li>Related information: Used for RDCP protocol discovery. Returns JSON describing RDCP endpoints and capabilities.</li> </ul>"},{"location":"rdcp-protocol-specification/#92-media-type-registration","title":"9.2 Media Type Registration","text":"<p>Type name: application</p> <p>Subtype name: vnd.rdcp.v1+json</p> <p>Required parameters: None</p> <p>Optional parameters: - charset: MUST be UTF-8 if specified</p> <p>Encoding considerations: binary (JSON text in UTF-8)</p> <p>Security considerations: See Section 8 of this document</p> <p>Interoperability considerations: Follows JSON syntax (RFC 8259)</p> <p>Published specification: This document</p> <p>Applications that use this media type: Distributed systems using RDCP for debug control</p> <p>Fragment identifier considerations: None</p> <p>Additional information: - Magic number(s): None - File extension(s): .json - Macintosh file type code(s): TEXT</p> <p>Person &amp; email address to contact: [Your Name] your.email@example.com</p> <p>Intended usage: COMMON</p> <p>Restrictions on usage: None</p> <p>Author: [Your Name]</p> <p>Change controller: IETF</p>"},{"location":"rdcp-protocol-specification/#93-error-code-registry","title":"9.3 Error Code Registry","text":"<p>IANA is requested to create and maintain a registry titled \"RDCP Error Codes\" with the following initial entries (aligned with the RDCP specification and schema):</p> Error Code HTTP Status Description Reference RDCP_AUTH_REQUIRED 401 Authentication required Section 3.4 RDCP_FORBIDDEN 403 Insufficient permissions Section 3.4 RDCP_MALFORMED_REQUEST 400 Malformed request Section 6.2 RDCP_CATEGORY_NOT_FOUND 404 Category does not exist Section 6.2 RDCP_NOT_FOUND 404 Resource does not exist Section 6.2 RDCP_RATE_LIMITED 429 Too many requests Section 8.5 RDCP_SERVER_ERROR 500 Server error Section 6.2 RDCP_UNAVAILABLE 503 Service temporarily unavailable Section 6.2 <p>Registration Procedure: Specification Required</p> <p>Expert Review: Designated experts should ensure: 1. Error codes follow naming convention: RDCP_[CONTEXT]_[CONDITION] 2. HTTP status codes are appropriate for the error type 3. Descriptions are clear and unambiguous 4. No conflicts with existing codes</p> <p>Change Procedure: New entries require IETF review or IESG approval</p>"},{"location":"rdcp-protocol-specification/#94-authentication-method-registry","title":"9.4 Authentication Method Registry","text":"<p>IANA is requested to create and maintain a registry titled \"RDCP Authentication Methods\":</p> Method Description Reference api-key Shared secret API key Section 3.2 bearer JWT or OAuth2 bearer token Section 3.2 mtls Mutual TLS with client certificates Section 3.2 hybrid Combination of mtls + bearer Section 3.2 <p>Registration Procedure: Specification Required</p> <p>Expert Review: Designated experts should verify: 1. Method is standards-based or widely adopted 2. Security properties are documented 3. Interoperability considerations are addressed</p>"},{"location":"rdcp-protocol-specification/#95-scope-registry","title":"9.5 Scope Registry","text":"<p>IANA is requested to create and maintain a registry titled \"RDCP Authorization Scopes\":</p> Scope Operations Description Reference discovery GET endpoints Read system information Section 3.3 status Status/Health Monitor system state Section 3.3 control POST control Modify debug settings Section 3.3 admin All operations Full access + audit trail Section 3.3 <p>Registration Procedure: Specification Required</p> <p>Expert Review: Review should ensure scopes follow principle of least privilege</p>"},{"location":"rdcp-protocol-specification/#10-compatibility","title":"10. Compatibility","text":""},{"location":"rdcp-protocol-specification/#101-version-negotiation","title":"10.1 Version Negotiation","text":"<p>Clients MUST include protocol version: <pre><code>Accept: application/vnd.rdcp.v1+json\n</code></pre></p> <p>Servers MUST respond with: <pre><code>Content-Type: application/vnd.rdcp.v1+json\n</code></pre></p>"},{"location":"rdcp-protocol-specification/#102-backward-compatibility","title":"10.2 Backward Compatibility","text":"<p>Future versions: - MUST maintain backward compatibility for 2 major versions - MUST use version in URL path (<code>/rdcp/v2/...</code>) - SHOULD provide version negotiation</p>"},{"location":"rdcp-protocol-specification/#11-extensibility","title":"11. Extensibility","text":""},{"location":"rdcp-protocol-specification/#111-custom-categories","title":"11.1 Custom Categories","text":"<p>Implementations MAY add custom debug categories: - MUST prefix with <code>X-</code> (e.g., <code>X-CUSTOM-FEATURE</code>) - MUST document in discovery endpoint</p>"},{"location":"rdcp-protocol-specification/#112-vendor-extensions","title":"11.2 Vendor Extensions","text":"<p>Vendors MAY extend responses with additional fields: - MUST prefix with vendor identifier - MUST NOT break standard clients</p> <p>Example: <pre><code>{\n  \"protocol\": \"rdcp/1.0\",\n  \"categories\": [...],\n  \"_vendor_secflo\": {\n    \"customField\": \"value\"\n  }\n}\n</code></pre></p>"},{"location":"rdcp-protocol-specification/#12-compliance-levels","title":"12. Compliance Levels","text":""},{"location":"rdcp-protocol-specification/#level-1-basic","title":"Level 1: Basic","text":"<ul> <li>Implements all required endpoints</li> <li>Security level: <code>basic</code> (API key authentication)</li> <li>Returns proper error codes</li> <li>Single-tenant or global configuration</li> <li>Optional audit logging</li> </ul>"},{"location":"rdcp-protocol-specification/#level-2-standard","title":"Level 2: Standard","text":"<ul> <li>All Level 1 requirements</li> <li>Security level: <code>standard</code> (Bearer tokens with scopes)</li> <li>Multi-tenancy support with isolation</li> <li>Performance metrics (may use placeholders)</li> <li>User identity in audit trail</li> <li>Key rotation support</li> </ul>"},{"location":"rdcp-protocol-specification/#level-3-enterprise","title":"Level 3: Enterprise","text":"<ul> <li>All Level 2 requirements</li> <li>Security level: <code>enterprise</code> (mTLS + tokens)</li> <li>Real performance metrics (measured, not estimated)</li> <li>Temporary controls with automatic expiration</li> <li>Rate limiting with configurable thresholds</li> <li>Full audit trail with compliance metadata</li> <li>Token refresh capability</li> <li>Multiple active keys per client</li> </ul>"},{"location":"rdcp-protocol-specification/#13-references","title":"13. References","text":""},{"location":"rdcp-protocol-specification/#131-normative-references","title":"13.1 Normative References","text":"<ul> <li>RFC 2119: Key words for use in RFCs</li> <li>RFC 8174: Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</li> <li>RFC 8259: JSON Data Interchange Format</li> <li>RFC 8615: Well-Known Uniform Resource Identifiers (URIs)</li> <li>RFC 3339: Date and Time on the Internet: Timestamps</li> <li>RFC 9110: HTTP Semantics</li> <li>RFC 9112: HTTP/1.1</li> <li>RFC 8446: The Transport Layer Security (TLS) Protocol Version 1.3</li> </ul>"},{"location":"rdcp-protocol-specification/#132-informative-references","title":"13.2 Informative References","text":"<ul> <li>RFC 7807: Problem Details for HTTP APIs</li> <li>RFC 7519: JSON Web Token (JWT)</li> <li>RFC 6749: The OAuth 2.0 Authorization Framework</li> </ul>"},{"location":"rdcp-protocol-specification/#appendix-a-implementation-notes","title":"Appendix A: Implementation Notes","text":"<p>This specification defines the protocol, not the implementation. Implementations: - MAY use any programming language - MAY use any storage mechanism - MAY implement additional features - MUST maintain protocol compliance for claimed level</p>"},{"location":"rdcp-protocol-specification/#appendix-b-change-log","title":"Appendix B: Change Log","text":"<ul> <li>v1.0 (2025-09-17): Initial specification</li> </ul>"},{"location":"rdcp-protocol-specification/#appendix-c-data-type-definitions","title":"Appendix C: Data Type Definitions","text":"<p>This protocol uses standard JSON primitives (string, number, boolean, object, array) with the following domain-specific constraints.</p>"},{"location":"rdcp-protocol-specification/#timestamp","title":"Timestamp","text":"<ul> <li>Type: string (RFC 3339 / ISO 8601 in UTC)</li> <li>Format: <code>YYYY-MM-DDTHH:mm:ss.sssZ</code> (milliseconds are REQUIRED; UTC 'Z' is REQUIRED)</li> <li>Example: <code>\"2025-09-17T10:30:00.000Z\"</code></li> <li>Validation: timezone offsets other than <code>Z</code> are not permitted</li> </ul>"},{"location":"rdcp-protocol-specification/#duration","title":"Duration","text":"<ul> <li>Type: number or string</li> <li>Number: integer seconds (e.g., <code>900</code>)</li> <li>String: <code>&lt;number&gt;&lt;unit&gt;</code> where unit \u2208 <code>s|m|h|d</code> (e.g., <code>\"15m\"</code>, <code>\"2h\"</code>, <code>\"30s\"</code>)</li> <li>Canonicalization (server responses): prefer string form with the smallest unit that divides evenly (e.g., <code>900</code> \u2192 <code>\"15m\"</code>)</li> </ul>"},{"location":"rdcp-protocol-specification/#categoryname","title":"CategoryName","text":"<ul> <li>Type: string</li> <li>Pattern: <code>^[A-Z][A-Z0-9_]{0,63}$</code></li> <li>Length: 1\u201364</li> <li>Case: uppercase with underscores</li> <li>Examples: <code>DATABASE</code>, <code>API_ROUTES</code>, <code>QUERY_CACHE</code></li> </ul>"},{"location":"rdcp-protocol-specification/#identifier-tenantid-clientid-requestid","title":"Identifier (TenantId, ClientId, RequestId)","text":"<ul> <li>Type: string</li> <li>Pattern: <code>^[a-zA-Z0-9._-]{1,255}$</code></li> <li>Length: 1\u2013255</li> <li>Notes:</li> <li>Intended for headers and path params (e.g., <code>X-RDCP-Tenant-ID</code>)</li> <li>Must not contain whitespace</li> <li>Use URL-safe characters only</li> </ul>"},{"location":"rdcp-protocol-specification/#errorcode","title":"ErrorCode","text":"<ul> <li>Type: string</li> <li>Pattern: <code>^[A-Z0-9_]{3,64}$</code></li> <li>Examples: <code>UNAUTHORIZED</code>, <code>TENANT_NOT_FOUND</code>, <code>RATE_LIMITED</code></li> </ul>"},{"location":"rdcp-protocol-specification/#metric-numbers","title":"Metric Numbers","text":"<p>Use context-specific types: - CounterNumber: non-negative; for counts and totals - RateNumber: non-negative; for per-second and throughput metrics - GaugeNumber: finite number; may be negative if semantically valid</p>"},{"location":"rdcp-protocol-specification/#categorylist","title":"CategoryList","text":"<ul> <li>Type: array of CategoryName</li> <li>Constraints:</li> <li><code>uniqueItems: true</code> (no duplicates)</li> <li><code>minItems: 1</code></li> <li>Example: <code>[\"DATABASE\", \"API_ROUTES\"]</code></li> </ul> <p>End of RDCP Protocol Specification v1.0</p>"},{"location":"rdcp-protocol-specification/#appendix-d-authors-addresses","title":"Appendix D: Authors' Addresses","text":"<p>[Your Name] [Your Organization] Email: [your.email@example.com] URI: https://your-website.com</p>"},{"location":"rdcp-protocol-specification/#appendix-e-acknowledgments","title":"Appendix E: Acknowledgments","text":"<p>The authors would like to thank contributors and reviewers for their valuable feedback and contributions to this specification.</p>"},{"location":"rdcp-protocol-specification/#status-of-this-memo-template","title":"Status of This Memo (Template)","text":"<p>This document is an Internet-Draft and is subject to all provisions of Section 3 of RFC 2026. Internet-Drafts are working documents of the Internet Engineering Task Force (IETF). Note that other groups may also distribute working documents as Internet-Drafts. The list of current Internet-Drafts is at https://datatracker.ietf.org/drafts/current/.</p> <p>Internet-Drafts are draft documents valid for a maximum of six months and may be updated, replaced, or obsoleted by other documents at any time. It is inappropriate to use Internet-Drafts as reference material or to cite them other than as \"work in progress.\"</p>"},{"location":"rdcp-protocol-specification/#copyright-notice-template","title":"Copyright Notice (Template)","text":"<p>Copyright (c) 2025 IETF Trust and the persons identified as the document authors. All rights reserved.</p> <p>This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document.</p>"},{"location":"api/","title":"API Documentation","text":"<p> \u00b7 Download OpenAPI v1 (JSON)</p> <p>Use one of these views: - API Reference \u2014 clean, readable documentation - API Playground \u2014 interactive \"Try it out\" testing</p> <p>Both views use the same OpenAPI specification: openapi.json</p>"},{"location":"api/#quick-start","title":"Quick start","text":"<p>Want to test RDCP quickly?</p> <p>1) Choose your server URL (hostname + port) where RDCP endpoints are exposed. Example: <code>rdcp.example.com:8080</code> or <code>localhost:3000</code>. 2) Open the API Playground. In the top Server selector, set the server to <code>https://{hostname}</code> and enter your host value for the <code>hostname</code> variable. 3) Try Discovery:</p> <pre><code># Replace HOST with your server hostname:port\nHOST=localhost:3000\ncurl -fsS -H 'Accept: application/json' \"https://$HOST/.well-known/rdcp\"\n</code></pre> <p>4) List categories:</p> <pre><code>HOST=localhost:3000\nTENANT=acme-dev     # omit if not using multi-tenancy\ncurl -fsS -H 'Accept: application/json' -H \"X-RDCP-Tenant-ID: $TENANT\" \"https://$HOST/rdcp/v1/discovery\"\n</code></pre> <p>5) Enable a category temporarily (15 minutes):</p> <pre><code>HOST=localhost:3000\nTENANT=acme-dev\ncurl -fsS -X POST \"https://$HOST/rdcp/v1/control\" \\\n  -H 'Content-Type: application/json' \\\n  -H \"X-RDCP-Tenant-ID: $TENANT\" \\\n  --data '{\"action\":\"enable\",\"categories\":[\"DATABASE\"],\"options\":{\"temporary\":true,\"duration\":\"15m\"}}'\n</code></pre> <p>6) Check status:</p> <pre><code>HOST=localhost:3000\nTENANT=acme-dev\ncurl -fsS -H 'Accept: application/json' -H \"X-RDCP-Tenant-ID: $TENANT\" \"https://$HOST/rdcp/v1/status\"\n</code></pre>"},{"location":"api/#authentication-setup","title":"Authentication setup","text":"<p>RDCP supports multiple security levels. For basic testing, use one of:</p> <ul> <li>API Key (Basic):</li> <li>Header: <code>X-RDCP-API-Key: rdcp_dev_basic_XXXX</code></li> <li>Example:     <pre><code>curl -fsS -H 'X-RDCP-API-Key: rdcp_dev_basic_XXXX' \"https://$HOST/rdcp/v1/status\"\n</code></pre></li> <li>Bearer Token (Standard):</li> <li>Header: <code>Authorization: Bearer &lt;JWT&gt;</code></li> <li>Example:     <pre><code>curl -fsS -H 'Authorization: Bearer eyJhbGciOi...' \"https://$HOST/rdcp/v1/status\"\n</code></pre></li> </ul> <p>Consult your deployment for how to provision keys/tokens. For multi-tenant setups, add <code>X-RDCP-Tenant-ID</code> as shown in the examples.</p>"},{"location":"api/#common-use-cases","title":"Common use cases","text":"<ul> <li>Testing discovery endpoint \u2014 Playground (GET <code>/.well-known/rdcp</code>, GET <code>/rdcp/v1/discovery</code>)</li> <li>Enabling debug categories \u2014 Playground (POST <code>/rdcp/v1/control</code>)</li> <li>Checking status \u2014 Playground (GET <code>/rdcp/v1/status</code>)</li> <li>Health checks \u2014 Playground (GET <code>/rdcp/v1/health</code>)</li> </ul>"},{"location":"api/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>CORS in browsers: If the Playground runs in your browser and your RDCP server is on a different origin, enable CORS on the server (allow <code>GET, POST</code> for the RDCP paths; allow headers <code>Authorization, X-RDCP-API-Key, X-RDCP-Tenant-ID, Content-Type</code>).</li> <li>401/403 errors: Ensure your API key or bearer token is valid and your scopes allow the operation.</li> <li>404 category not found: Verify the category exists in <code>/rdcp/v1/discovery</code> and that the name matches exactly (e.g., <code>DATABASE</code>).</li> <li>\"Loading\u2026\" stuck in Reference: ensure the spec is reachable at <code>../v1/openapi.json</code> from the Reference page (it is preconfigured); hard refresh can help bypass caches.</li> </ul> <p>Licensed under the Apache License, Version 2.0. You may obtain a copy at http://www.apache.org/licenses/LICENSE-2.0</p>"},{"location":"api/playground/","title":"API Playground","text":""},{"location":"api/reference/","title":"API Reference","text":""},{"location":"compliance-kit/v1.0/","title":"RDCP Compliance Kit v1.0 \u2014 Overview","text":"<p>The RDCP Compliance Kit helps verify that an implementation conforms to the RDCP v1.0 specification using portable JSON fixtures and curl.</p> <p>What this section provides: - What the kit is and how to use it - A browsable Test Manifest and Assertions - A minimal guide to running local validation</p> <p>Quick links: - Test Manifest: MANIFEST.md - Assertions: assertions.md - Running Tests: running-tests.md - Source fixtures (GitHub): https://github.com/mojoatomic/rdcp-protocol/tree/main/compliance-kit/v1.0</p> <p>The fixtures themselves live in the repository and are downloadable artifacts. Use this documentation to understand what tests exist and how to run them; use the GitHub directory to fetch the raw JSON files.</p>"},{"location":"compliance-kit/v1.0/MANIFEST/","title":"Compliance Kit Test Manifest (v1.0)","text":"<p>This page summarizes the tests and sequences defined in MANIFEST.json.</p>"},{"location":"compliance-kit/v1.0/MANIFEST/#tests","title":"Tests","text":"ID Name Method Path Expected Schema well-known-200 Well-known discovery returns protocol info GET /.well-known/rdcp 200 schema/v1/endpoints/protocol-discovery.json discovery-200 Discovery lists categories GET /rdcp/v1/discovery 200 schema/v1/endpoints/discovery-response.json discovery-tenant-invalid-400 Discovery rejects invalid tenant header GET /rdcp/v1/discovery 400 schema/v1/responses/error.json control-enable-200 Control enable DATABASE succeeds POST /rdcp/v1/control 200 schema/v1/endpoints/control-response.json control-invalid-action-400 Control invalid action rejected POST /rdcp/v1/control 400 schema/v1/responses/error.json control-invalid-category-400 Control invalid category rejected POST /rdcp/v1/control 400 schema/v1/responses/error.json control-missing-categories-400 Control missing categories rejected POST /rdcp/v1/control 400 schema/v1/responses/error.json status-200 Status endpoint returns current states GET /rdcp/v1/status 200 schema/v1/endpoints/status-response.json errors-401 Protected endpoints require auth GET /rdcp/v1/status 401 schema/v1/responses/error.json errors-403 Insufficient scope rejected POST /rdcp/v1/control 403 schema/v1/responses/error.json errors-404 Unknown category returns 404 POST /rdcp/v1/control 404 schema/v1/responses/error.json"},{"location":"compliance-kit/v1.0/MANIFEST/#sequences","title":"Sequences","text":"<ul> <li>enable-and-verify \u2014 Enable DATABASE then verify via status</li> <li>POST /rdcp/v1/control (enable)</li> <li>GET /rdcp/v1/status \u2192 expect categories.DATABASE === true</li> </ul>"},{"location":"compliance-kit/v1.0/assertions/","title":"Assertions and Coverage (v1.0)","text":"<p>This document explains what each fixture/sequence is asserting against the RDCP v1.0 specification.</p>"},{"location":"compliance-kit/v1.0/assertions/#endpoints","title":"Endpoints","text":"<ul> <li><code>/.well-known/rdcp</code> \u2192 WellKnownResponse</li> <li>Asserts required fields: protocol, endpoints, capabilities, security</li> <li><code>/rdcp/v1/discovery</code> \u2192 DiscoveryResponse</li> <li>Asserts timestamp format, categories array, performance object</li> <li>Negative: invalid <code>X-RDCP-Tenant-ID</code> fails with 400 ErrorResponse</li> <li><code>/rdcp/v1/control</code> \u2192 ControlRequest/ControlResponse</li> <li>Valid: action=enable + categories=[\"DATABASE\"] returns 200 ControlResponse</li> <li>Negative: invalid action, invalid category pattern, missing categories \u2192 400 ErrorResponse</li> <li><code>/rdcp/v1/status</code> \u2192 StatusResponse</li> <li>Asserts enabled flag and categories map</li> </ul>"},{"location":"compliance-kit/v1.0/assertions/#behavior-sequence","title":"Behavior sequence","text":"<ul> <li><code>enable-and-verify</code>:   1) POST control (enable DATABASE)   2) GET status \u2192 categories.DATABASE === true</li> </ul>"},{"location":"compliance-kit/v1.0/assertions/#error-conditions","title":"Error conditions","text":"<ul> <li>401 Unauthorized: protected endpoints with missing/invalid auth</li> <li>403 Forbidden: insufficient scopes/permissions</li> <li>404 Not Found: unknown category</li> </ul>"},{"location":"compliance-kit/v1.0/assertions/#schema-references","title":"Schema references","text":"<ul> <li>Common: schema/v1/common/rdcp-common.json</li> <li>Well-known: schema/v1/endpoints/protocol-discovery.json</li> <li>Discovery: schema/v1/endpoints/discovery-response.json</li> <li>Control (request/response): schema/v1/endpoints/control-request.json, control-response.json</li> <li>Status: schema/v1/endpoints/status-response.json</li> <li>Error envelope: schema/v1/responses/error.json</li> </ul>"},{"location":"compliance-kit/v1.0/running-tests/","title":"Running Tests and Validation (v1.0)","text":""},{"location":"compliance-kit/v1.0/running-tests/#running-validation-locally","title":"Running Validation Locally","text":"<p><pre><code># Install dependencies\nnpm install\n\n# Validate all fixtures\nnode scripts/validate-fixtures.js\n</code></pre> If validation fails, check: - Fixture conforms to schema structure - Error codes match defined values in error-codes.md - Field names match exactly (e.g., callsTotal not totalCalls)</p> <p>For endpoint curl examples, see the Compliance Kit README in the repository: - https://github.com/mojoatomic/rdcp-protocol/tree/main/compliance-kit/v1.0</p>"},{"location":"schemas/","title":"JSON Schemas","text":"<p>The RDCP protocol publishes versioned JSON Schemas for all request and response message types. These schemas provide a precise, machine\u2011readable definition of message structure for implementers.</p> <ul> <li>Canonical base URL: https://mojoatomic.github.io/rdcp-protocol/schema/v1/</li> <li>Meta\u2011schema: http://json-schema.org/draft-07/schema</li> </ul> <p>Schema categories</p> <ul> <li>Common Types</li> <li>Shared type definitions used across endpoints</li> <li>Endpoints</li> <li>Request/response schemas for all RDCP endpoints</li> <li>Response Types</li> <li>Standard error response format</li> </ul> <p>Usage</p> <ul> <li>Programmatic validation (e.g., Ajv, python-jsonschema)</li> <li>CI validation of example payloads</li> <li>Code generation for strongly typed clients/servers</li> </ul> <p>See also: - How to validate locally: scripts/validate-schemas.js - Full usage examples (Node, Python, Go, Java): schema/README.md</p>"},{"location":"schemas/common/","title":"Common Definitions","text":"<p>Shared type definitions used across endpoint schemas.</p> <ul> <li>Canonical: https://mojoatomic.github.io/rdcp-protocol/schema/v1/common/rdcp-common.json</li> <li>Repository: schema/v1/common/rdcp-common.json</li> </ul> <p>This schema defines reusable elements such as: - protocolVersion (const: \"rdcp/1.0\") - timestamp (ISO 8601) - categoryName (uppercase + underscores) - tenantContext (id, isolationLevel, scope) - securityLevel, authMethod - metrics (callsTotal, callsPerSecond)</p> <p>Example usage (Node + Ajv):</p> <pre><code>// Load and add the common schema by its canonical $id first\n</code></pre>"},{"location":"schemas/endpoints/control-request/","title":"Control Request Schema","text":"<p>Defines the request body for <code>POST /rdcp/v1/control</code>.</p> <ul> <li>Canonical: https://mojoatomic.github.io/rdcp-protocol/schema/v1/endpoints/control-request.json</li> <li>Repository: schema/v1/endpoints/control-request.json</li> </ul> <p>Key fields - action: \"enable\" | \"disable\" | \"toggle\" | \"reset\" | \"status\" - categories: string or array of categoryName - options: { temporary, duration, reason }</p> <p>Sample request</p> <pre><code>{\n  \"action\": \"enable\",\n  \"categories\": [\"DATABASE\", \"API_ROUTES\"],\n  \"options\": { \"temporary\": true, \"duration\": \"15m\", \"reason\": \"Investigating issue\" }\n}\n</code></pre> <p>Validation tip - Use the common schema first to satisfy <code>$ref</code> resolutions, then compile this schema.</p>"},{"location":"schemas/endpoints/control-response/","title":"Control Response Schema","text":"<p>Defines the response body for <code>POST /rdcp/v1/control</code>.</p> <ul> <li>Canonical: https://mojoatomic.github.io/rdcp-protocol/schema/v1/endpoints/control-response.json</li> <li>Repository: schema/v1/endpoints/control-response.json</li> </ul> <p>Key fields - protocol, timestamp, action, categories, status, message - changes[]: category, previousState, newState, temporary, effectiveAt, expiresAt</p> <p>Sample response</p> <pre><code>{\n  \"protocol\": \"rdcp/1.0\",\n  \"timestamp\": \"2025-09-17T10:30:00Z\",\n  \"action\": \"enable\",\n  \"categories\": [\"DATABASE\"],\n  \"status\": \"success\",\n  \"message\": \"Enabled categories\",\n  \"changes\": [\n    {\n      \"category\": \"DATABASE\",\n      \"previousState\": false,\n      \"newState\": true,\n      \"temporary\": true,\n      \"effectiveAt\": \"2025-09-17T10:30:00Z\",\n      \"expiresAt\": \"2025-09-17T10:45:00Z\"\n    }\n  ]\n}\n</code></pre>"},{"location":"schemas/endpoints/discovery-response/","title":"Discovery Response Schema","text":"<p>Defines the response body for <code>GET /rdcp/v1/discovery</code>.</p> <ul> <li>Canonical: https://mojoatomic.github.io/rdcp-protocol/schema/v1/endpoints/discovery-response.json</li> <li>Repository: schema/v1/endpoints/discovery-response.json</li> </ul> <p>Key fields - protocol, timestamp - categories[]: name, description, enabled, temporary, metrics - performance: totalCalls, callsPerSecond, categoryBreakdown</p> <p>Sample response</p> <pre><code>{\n  \"protocol\": \"rdcp/1.0\",\n  \"timestamp\": \"2025-09-17T10:30:00Z\",\n  \"categories\": [\n    {\n      \"name\": \"DATABASE\",\n      \"description\": \"Database operations\",\n      \"enabled\": true,\n      \"temporary\": false,\n      \"metrics\": { \"callsTotal\": 1234, \"callsPerSecond\": 2.3 }\n    }\n  ],\n  \"performance\": {\n    \"totalCalls\": 45678,\n    \"callsPerSecond\": 2.3,\n    \"categoryBreakdown\": { \"DATABASE\": 1234 }\n  }\n}\n</code></pre>"},{"location":"schemas/endpoints/health-response/","title":"Health Response Schema","text":"<p>Defines the response body for <code>GET /rdcp/v1/health</code>.</p> <ul> <li>Canonical: https://mojoatomic.github.io/rdcp-protocol/schema/v1/endpoints/health-response.json</li> <li>Repository: schema/v1/endpoints/health-response.json</li> </ul> <p>Key fields - protocol, timestamp, status: \"healthy\" | \"degraded\" | \"unhealthy\" - checks[]: name, status, duration</p> <p>Sample response</p> <pre><code>{\n  \"protocol\": \"rdcp/1.0\",\n  \"timestamp\": \"2025-09-17T10:30:00Z\",\n  \"status\": \"healthy\",\n  \"checks\": [\n    { \"name\": \"redis\", \"status\": \"pass\", \"duration\": \"5ms\" },\n    { \"name\": \"db\", \"status\": \"pass\", \"duration\": \"8ms\" }\n  ]\n}\n</code></pre>"},{"location":"schemas/endpoints/protocol-discovery/","title":"Protocol Discovery","text":"<p>The Protocol Discovery document is returned by the well-known endpoint <code>/.well-known/rdcp</code> and describes the RDCP protocol version, endpoint locations, capabilities, and security configuration.</p> <ul> <li>HTTP method: GET</li> <li>Path: <code>/.well-known/rdcp</code></li> <li>Canonical: https://mojoatomic.github.io/rdcp-protocol/schema/v1/endpoints/protocol-discovery.json</li> <li>Repository: schema/v1/endpoints/protocol-discovery.json</li> </ul>"},{"location":"schemas/endpoints/protocol-discovery/#example-response","title":"Example response","text":"<p>```json path=null start=null {   \"protocol\": \"rdcp/1.0\",   \"endpoints\": {     \"discovery\": \"/rdcp/v1/discovery\",     \"control\": \"/rdcp/v1/control\",     \"status\": \"/rdcp/v1/status\",     \"health\": \"/rdcp/v1/health\"   },   \"capabilities\": {     \"multiTenancy\": true,     \"performanceMetrics\": true,     \"temporaryControls\": true,     \"auditTrail\": true   },   \"security\": {     \"level\": \"standard\",     \"methods\": [\"api-key\", \"bearer\"],     \"scopes\": [\"discovery\", \"status\", \"control\", \"admin\"],     \"required\": true,     \"keyRotation\": true,     \"tokenRefresh\": true   } } <pre><code>## Validation\n\nYou can validate discovery responses using the JSON schema above with your preferred validator (e.g., AJV):\n\n```bash path=null start=null\nnpx ajv -s schema/v1/endpoints/protocol-discovery.json -d discovery.json --valid\n</code></pre></p>"},{"location":"schemas/endpoints/status-response/","title":"Status Response Schema","text":"<p>Defines the response body for <code>GET /rdcp/v1/status</code>.</p> <ul> <li>Canonical: https://mojoatomic.github.io/rdcp-protocol/schema/v1/endpoints/status-response.json</li> <li>Repository: schema/v1/endpoints/status-response.json</li> </ul> <p>Key fields - protocol, timestamp, enabled - categories: map of categoryName -&gt; boolean - performance: callsTotal, callsPerSecond</p> <p>Sample response</p> <pre><code>{\n  \"protocol\": \"rdcp/1.0\",\n  \"timestamp\": \"2025-09-17T10:30:00Z\",\n  \"enabled\": true,\n  \"categories\": { \"DATABASE\": true, \"API_ROUTES\": false },\n  \"performance\": { \"callsTotal\": 45678, \"callsPerSecond\": 2.3 }\n}\n</code></pre>"},{"location":"schemas/responses/error/","title":"Error Response Schema","text":"<p>Defines the standard error response envelope used across endpoints.</p> <ul> <li>Canonical: https://mojoatomic.github.io/rdcp-protocol/schema/v1/responses/error.json</li> <li>Repository: schema/v1/responses/error.json</li> </ul> <p>Key fields - error: { code, message, details?, protocol }</p> <p>Sample response</p> <pre><code>{\n  \"error\": {\n    \"code\": \"RDCP_VALIDATION_ERROR\",\n    \"message\": \"Request validation failed\",\n    \"details\": { \"field\": \"categories\" },\n    \"protocol\": \"rdcp/1.0\"\n  }\n}\n</code></pre>"}]}