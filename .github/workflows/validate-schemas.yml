name: Validate JSON Schemas
on:
  push:
    paths:
      - 'schema/**/*.json'
      - '.github/workflows/validate-schemas.yml'
  pull_request:
    paths:
      - 'schema/**/*.json'
      - '.github/workflows/validate-schemas.yml'

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          npm init -y
          npm install ajv ajv-formats ajv-cli
          
      - name: Validate schemas (compile and examples)
        run: |
          echo "üß™ Validating JSON Schemas with Ajv (draft-07) ..."
          node <<'NODE'
          const Ajv = require('ajv');
          const addFormats = require('ajv-formats');
          const draft7Meta = require('ajv/dist/refs/json-schema-draft-07.json');
          const fs = require('fs');

          const ajv = new Ajv({ allErrors: true, strict: false });
          try {
            if (!ajv.getSchema('http://json-schema.org/draft-07/schema')) {
              ajv.addMetaSchema(draft7Meta);
            }
          } catch (e) {
            // ignore if already added
          }
          addFormats(ajv);

          // Preload common schema with its canonical $id so $ref works
          const commonPath = 'schema/v1/common/rdcp-common.json';
          const commonSchema = JSON.parse(fs.readFileSync(commonPath, 'utf8'));
          ajv.addSchema(commonSchema, 'https://mojoatomic.github.io/rdcp-protocol/schema/v1/common/rdcp-common.json');
          console.log('‚úÖ Loaded common schema');

          const schemaFiles = [
            'schema/v1/responses/error.json',
            'schema/v1/endpoints/protocol-discovery.json',
            'schema/v1/endpoints/control-request.json',
            'schema/v1/endpoints/control-response.json',
            'schema/v1/endpoints/discovery-response.json',
            'schema/v1/endpoints/status-response.json',
            'schema/v1/endpoints/health-response.json'
          ];

          for (const file of schemaFiles) {
            console.log(`üìã Compiling schema: ${file}`);
            const schema = JSON.parse(fs.readFileSync(file, 'utf8'));

            let validate;
            try {
              validate = ajv.compile(schema);
              console.log(`‚úÖ ${file} - Compiled`);
            } catch (error) {
              console.error(`‚ùå ${file} - Compile error: ${error.message}`);
              process.exit(1);
            }

            if (schema.examples && Array.isArray(schema.examples)) {
              schema.examples.forEach((example, i) => {
                const valid = validate(example);
                if (!valid) {
                  console.error(`‚ùå ${file} example #${i+1} failed validation`);
                  console.error(validate.errors);
                  process.exit(1);
                } else {
                  console.log(`  ‚úÖ Example #${i+1} valid`);
                }
              });
            }
          }

          console.log('üéâ All schemas and examples validated successfully!');
          NODE
          
          
      - name: Generate schema summary
        run: |
          echo "üìà Schema Summary:"
          echo "=================="
          find schema -name "*.json" | wc -l | xargs echo "Total schemas:"
          echo ""
          echo "Schema files by category:"
          echo "- Common definitions: $(find schema/v1/common -name "*.json" | wc -l)"
          echo "- Endpoint schemas: $(find schema/v1/endpoints -name "*.json" | wc -l)" 
          echo "- Response schemas: $(find schema/v1/responses -name "*.json" | wc -l)"
          echo ""
          echo "All schemas validated successfully! ‚úÖ"